//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `agencytermscondition.html`.
    static let agencytermsconditionHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "agencytermscondition", pathExtension: "html")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "agencytermscondition", withExtension: "html")`
    static func agencytermsconditionHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.agencytermsconditionHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `AvenirLTStd-Medium`.
    static let avenirLTStdMedium = Rswift.FontResource(fontName: "AvenirLTStd-Medium")
    /// Font `Barlow-Bold`.
    static let barlowBold = Rswift.FontResource(fontName: "Barlow-Bold")
    /// Font `Barlow-Italic`.
    static let barlowItalic = Rswift.FontResource(fontName: "Barlow-Italic")
    /// Font `Barlow-Light`.
    static let barlowLight = Rswift.FontResource(fontName: "Barlow-Light")
    /// Font `Barlow-Medium`.
    static let barlowMedium = Rswift.FontResource(fontName: "Barlow-Medium")
    /// Font `Barlow-Regular`.
    static let barlowRegular = Rswift.FontResource(fontName: "Barlow-Regular")
    /// Font `OpenSans-Regular`.
    static let openSansRegular = Rswift.FontResource(fontName: "OpenSans-Regular")
    /// Font `Quando-Regular`.
    static let quandoRegular = Rswift.FontResource(fontName: "Quando-Regular")
    
    /// `UIFont(name: "AvenirLTStd-Medium", size: ...)`
    static func avenirLTStdMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirLTStdMedium, size: size)
    }
    
    /// `UIFont(name: "Barlow-Bold", size: ...)`
    static func barlowBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowBold, size: size)
    }
    
    /// `UIFont(name: "Barlow-Italic", size: ...)`
    static func barlowItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowItalic, size: size)
    }
    
    /// `UIFont(name: "Barlow-Light", size: ...)`
    static func barlowLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowLight, size: size)
    }
    
    /// `UIFont(name: "Barlow-Medium", size: ...)`
    static func barlowMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowMedium, size: size)
    }
    
    /// `UIFont(name: "Barlow-Regular", size: ...)`
    static func barlowRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: barlowRegular, size: size)
    }
    
    /// `UIFont(name: "OpenSans-Regular", size: ...)`
    static func openSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansRegular, size: size)
    }
    
    /// `UIFont(name: "Quando-Regular", size: ...)`
    static func quandoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: quandoRegular, size: size)
    }
    
    static func validate() throws {
      if R.font.avenirLTStdMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirLTStd-Medium' could not be loaded, is 'AvenirLTStd-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Barlow-Bold' could not be loaded, is 'Barlow-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Barlow-Italic' could not be loaded, is 'barlow.italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Barlow-Light' could not be loaded, is 'barlow.light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Barlow-Medium' could not be loaded, is 'Barlow-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.barlowRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Barlow-Regular' could not be loaded, is 'Barlow-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Regular' could not be loaded, is 'OpenSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.quandoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Quando-Regular' could not be loaded, is 'Quando-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 156 images.
  struct image {
    /// Image `Image-1`.
    static let image1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image-1")
    /// Image `addIconColor`.
    static let addIconColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "addIconColor")
    /// Image `addIconWhite`.
    static let addIconWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "addIconWhite")
    /// Image `afterRegistration`.
    static let afterRegistration = Rswift.ImageResource(bundle: R.hostingBundle, name: "afterRegistration")
    /// Image `afterSignUp`.
    static let afterSignUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "afterSignUp")
    /// Image `arrowBottom`.
    static let arrowBottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowBottom")
    /// Image `arrowDownWhite`.
    static let arrowDownWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowDownWhite")
    /// Image `arrowGrey`.
    static let arrowGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowGrey")
    /// Image `arrowLeft`.
    static let arrowLeft = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowLeft")
    /// Image `arrowRightWhite`.
    static let arrowRightWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowRightWhite")
    /// Image `arrowRight`.
    static let arrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowRight")
    /// Image `attachCamera`.
    static let attachCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachCamera")
    /// Image `attachDocument`.
    static let attachDocument = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachDocument")
    /// Image `attachGallery`.
    static let attachGallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachGallery")
    /// Image `attachIcon`.
    static let attachIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachIcon")
    /// Image `attachLocation`.
    static let attachLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachLocation")
    /// Image `backArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "backArrow")
    /// Image `backBlack`.
    static let backBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "backBlack")
    /// Image `backWhite`.
    static let backWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "backWhite")
    /// Image `balanceColor`.
    static let balanceColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "balanceColor")
    /// Image `bca`.
    static let bca = Rswift.ImageResource(bundle: R.hostingBundle, name: "bca")
    /// Image `bgBack`.
    static let bgBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgBack")
    /// Image `bgDecor`.
    static let bgDecor = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgDecor")
    /// Image `bgMenuLogo`.
    static let bgMenuLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgMenuLogo")
    /// Image `bgSplashBackground`.
    static let bgSplashBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgSplashBackground")
    /// Image `bgfront`.
    static let bgfront = Rswift.ImageResource(bundle: R.hostingBundle, name: "bgfront")
    /// Image `blankImage`.
    static let blankImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "blankImage")
    /// Image `calendarColor`.
    static let calendarColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendarColor")
    /// Image `callBlack`.
    static let callBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "callBlack")
    /// Image `callColor`.
    static let callColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "callColor")
    /// Image `chatGrey`.
    static let chatGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatGrey")
    /// Image `chatTheme`.
    static let chatTheme = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatTheme")
    /// Image `checklistDone`.
    static let checklistDone = Rswift.ImageResource(bundle: R.hostingBundle, name: "checklistDone")
    /// Image `clockDuration`.
    static let clockDuration = Rswift.ImageResource(bundle: R.hostingBundle, name: "clockDuration")
    /// Image `clockHistory`.
    static let clockHistory = Rswift.ImageResource(bundle: R.hostingBundle, name: "clockHistory")
    /// Image `closeBlack`.
    static let closeBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeBlack")
    /// Image `closeWhite`.
    static let closeWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeWhite")
    /// Image `connectFb`.
    static let connectFb = Rswift.ImageResource(bundle: R.hostingBundle, name: "connectFb")
    /// Image `connectIG`.
    static let connectIG = Rswift.ImageResource(bundle: R.hostingBundle, name: "connectIG")
    /// Image `connectTwitter`.
    static let connectTwitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "connectTwitter")
    /// Image `connectYoutube`.
    static let connectYoutube = Rswift.ImageResource(bundle: R.hostingBundle, name: "connectYoutube")
    /// Image `contactAttachment`.
    static let contactAttachment = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactAttachment")
    /// Image `contactIcon`.
    static let contactIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactIcon")
    /// Image `contactSend`.
    static let contactSend = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactSend")
    /// Image `currencyIcon`.
    static let currencyIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "currencyIcon")
    /// Image `deleteColorSmall`.
    static let deleteColorSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "deleteColorSmall")
    /// Image `deleteSmallWhite`.
    static let deleteSmallWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "deleteSmallWhite")
    /// Image `dotPurple`.
    static let dotPurple = Rswift.ImageResource(bundle: R.hostingBundle, name: "dotPurple")
    /// Image `editIcon`.
    static let editIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "editIcon")
    /// Image `editSmallWhite`.
    static let editSmallWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "editSmallWhite")
    /// Image `emptyData`.
    static let emptyData = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyData")
    /// Image `errorIcon`.
    static let errorIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "errorIcon")
    /// Image `eyeColor`.
    static let eyeColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeColor")
    /// Image `favoriteSelected`.
    static let favoriteSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "favoriteSelected")
    /// Image `favoriteUnselected`.
    static let favoriteUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "favoriteUnselected")
    /// Image `finishOrderSlide`.
    static let finishOrderSlide = Rswift.ImageResource(bundle: R.hostingBundle, name: "finishOrderSlide")
    /// Image `finishOrder`.
    static let finishOrder = Rswift.ImageResource(bundle: R.hostingBundle, name: "finishOrder")
    /// Image `hamburgerBlack`.
    static let hamburgerBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "hamburgerBlack")
    /// Image `hamburgerWhite`.
    static let hamburgerWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "hamburgerWhite")
    /// Image `historyRequestOrder`.
    static let historyRequestOrder = Rswift.ImageResource(bundle: R.hostingBundle, name: "historyRequestOrder")
    /// Image `icAddPackageGradient`.
    static let icAddPackageGradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "icAddPackageGradient")
    /// Image `icAddPackage`.
    static let icAddPackage = Rswift.ImageResource(bundle: R.hostingBundle, name: "icAddPackage")
    /// Image `icBlock`.
    static let icBlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "icBlock")
    /// Image `icContact`.
    static let icContact = Rswift.ImageResource(bundle: R.hostingBundle, name: "icContact")
    /// Image `icEditBackground`.
    static let icEditBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "icEditBackground")
    /// Image `icFacebook`.
    static let icFacebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icFacebook")
    /// Image `icFavorite`.
    static let icFavorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icFavorite")
    /// Image `icFilter`.
    static let icFilter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icFilter")
    /// Image `icFooterMenu`.
    static let icFooterMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icFooterMenu")
    /// Image `icGoogle`.
    static let icGoogle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icGoogle")
    /// Image `icHeart`.
    static let icHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "icHeart")
    /// Image `icHideBlack`.
    static let icHideBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "icHideBlack")
    /// Image `icHideMenu`.
    static let icHideMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "icHideMenu")
    /// Image `icLocation`.
    static let icLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "icLocation")
    /// Image `icManage`.
    static let icManage = Rswift.ImageResource(bundle: R.hostingBundle, name: "icManage")
    /// Image `icMeeting`.
    static let icMeeting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icMeeting")
    /// Image `icMenuArt`.
    static let icMenuArt = Rswift.ImageResource(bundle: R.hostingBundle, name: "icMenuArt")
    /// Image `icMenuBeauty`.
    static let icMenuBeauty = Rswift.ImageResource(bundle: R.hostingBundle, name: "icMenuBeauty")
    /// Image `icMenuBurger`.
    static let icMenuBurger = Rswift.ImageResource(bundle: R.hostingBundle, name: "icMenuBurger")
    /// Image `icMenuEntertainment`.
    static let icMenuEntertainment = Rswift.ImageResource(bundle: R.hostingBundle, name: "icMenuEntertainment")
    /// Image `icMenuFashion`.
    static let icMenuFashion = Rswift.ImageResource(bundle: R.hostingBundle, name: "icMenuFashion")
    /// Image `icMenuFood`.
    static let icMenuFood = Rswift.ImageResource(bundle: R.hostingBundle, name: "icMenuFood")
    /// Image `icMenuMore`.
    static let icMenuMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "icMenuMore")
    /// Image `icMenuPhotography`.
    static let icMenuPhotography = Rswift.ImageResource(bundle: R.hostingBundle, name: "icMenuPhotography")
    /// Image `icMenuVideography`.
    static let icMenuVideography = Rswift.ImageResource(bundle: R.hostingBundle, name: "icMenuVideography")
    /// Image `icReport`.
    static let icReport = Rswift.ImageResource(bundle: R.hostingBundle, name: "icReport")
    /// Image `icSettings`.
    static let icSettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "icSettings")
    /// Image `icShare`.
    static let icShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "icShare")
    /// Image `icSort`.
    static let icSort = Rswift.ImageResource(bundle: R.hostingBundle, name: "icSort")
    /// Image `icStarGrey`.
    static let icStarGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "icStarGrey")
    /// Image `icStarYellow`.
    static let icStarYellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "icStarYellow")
    /// Image `icTAndC`.
    static let icTAndC = Rswift.ImageResource(bundle: R.hostingBundle, name: "icTAndC")
    /// Image `icUpload`.
    static let icUpload = Rswift.ImageResource(bundle: R.hostingBundle, name: "icUpload")
    /// Image `icWishlist`.
    static let icWishlist = Rswift.ImageResource(bundle: R.hostingBundle, name: "icWishlist")
    /// Image `iconAddMultiplePhotos`.
    static let iconAddMultiplePhotos = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAddMultiplePhotos")
    /// Image `iconAddPhoto`.
    static let iconAddPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconAddPhoto")
    /// Image `iconBank`.
    static let iconBank = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconBank")
    /// Image `iconInstagram`.
    static let iconInstagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconInstagram")
    /// Image `iconLinkedin`.
    static let iconLinkedin = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLinkedin")
    /// Image `iconLove`.
    static let iconLove = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLove")
    /// Image `iconMeeting`.
    static let iconMeeting = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconMeeting")
    /// Image `iconWebsite`.
    static let iconWebsite = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconWebsite")
    /// Image `iconYoutube`.
    static let iconYoutube = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconYoutube")
    /// Image `imageSideMenu`.
    static let imageSideMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageSideMenu")
    /// Image `imageTitleIgetspot`.
    static let imageTitleIgetspot = Rswift.ImageResource(bundle: R.hostingBundle, name: "imageTitleIgetspot")
    /// Image `locationColor`.
    static let locationColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationColor")
    /// Image `locationTimeGray`.
    static let locationTimeGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationTimeGray")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `mapIcon`.
    static let mapIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapIcon")
    /// Image `menuContactUs`.
    static let menuContactUs = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuContactUs")
    /// Image `menuFavorite`.
    static let menuFavorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuFavorite")
    /// Image `menuHelpCenter`.
    static let menuHelpCenter = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuHelpCenter")
    /// Image `menuSettings`.
    static let menuSettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuSettings")
    /// Image `menuSignIn`.
    static let menuSignIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuSignIn")
    /// Image `menuTnC`.
    static let menuTnC = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuTnC")
    /// Image `menuWishlist`.
    static let menuWishlist = Rswift.ImageResource(bundle: R.hostingBundle, name: "menuWishlist")
    /// Image `myspotIntro`.
    static let myspotIntro = Rswift.ImageResource(bundle: R.hostingBundle, name: "myspotIntro")
    /// Image `nextButtton`.
    static let nextButtton = Rswift.ImageResource(bundle: R.hostingBundle, name: "nextButtton")
    /// Image `notesColor`.
    static let notesColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "notesColor")
    /// Image `parallaxHeader`.
    static let parallaxHeader = Rswift.ImageResource(bundle: R.hostingBundle, name: "parallaxHeader")
    /// Image `paymentBank`.
    static let paymentBank = Rswift.ImageResource(bundle: R.hostingBundle, name: "paymentBank")
    /// Image `photoIcon`.
    static let photoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "photoIcon")
    /// Image `pinLocationColor`.
    static let pinLocationColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinLocationColor")
    /// Image `pinLocationGray`.
    static let pinLocationGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinLocationGray")
    /// Image `reportConfirmationOrder`.
    static let reportConfirmationOrder = Rswift.ImageResource(bundle: R.hostingBundle, name: "reportConfirmationOrder")
    /// Image `selectedOrder`.
    static let selectedOrder = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedOrder")
    /// Image `sendChat`.
    static let sendChat = Rswift.ImageResource(bundle: R.hostingBundle, name: "sendChat")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `signIn`.
    static let signIn = Rswift.ImageResource(bundle: R.hostingBundle, name: "signIn")
    /// Image `sliderKnob`.
    static let sliderKnob = Rswift.ImageResource(bundle: R.hostingBundle, name: "sliderKnob")
    /// Image `starGreySmall`.
    static let starGreySmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "starGreySmall")
    /// Image `starYellowSmall`.
    static let starYellowSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "starYellowSmall")
    /// Image `tabChatActive`.
    static let tabChatActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabChatActive")
    /// Image `tabChatInactive`.
    static let tabChatInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabChatInactive")
    /// Image `tabHistoryActive`.
    static let tabHistoryActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabHistoryActive")
    /// Image `tabHistoryInactive`.
    static let tabHistoryInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabHistoryInactive")
    /// Image `tabHomeActive`.
    static let tabHomeActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabHomeActive")
    /// Image `tabHomeInactive`.
    static let tabHomeInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabHomeInactive")
    /// Image `tabMasterActive`.
    static let tabMasterActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabMasterActive")
    /// Image `tabMasterInactive`.
    static let tabMasterInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabMasterInactive")
    /// Image `tabTransactionActive`.
    static let tabTransactionActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabTransactionActive")
    /// Image `tabTransactionInactive`.
    static let tabTransactionInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabTransactionInactive")
    /// Image `thankYouPayment`.
    static let thankYouPayment = Rswift.ImageResource(bundle: R.hostingBundle, name: "thankYouPayment")
    /// Image `thumbUp`.
    static let thumbUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "thumbUp")
    /// Image `timeColor`.
    static let timeColor = Rswift.ImageResource(bundle: R.hostingBundle, name: "timeColor")
    /// Image `unselectedOrder`.
    static let unselectedOrder = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectedOrder")
    /// Image `userIcon`.
    static let userIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "userIcon")
    /// Image `userPlacaholder`.
    static let userPlacaholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "userPlacaholder")
    /// Image `virtualAccountPayment`.
    static let virtualAccountPayment = Rswift.ImageResource(bundle: R.hostingBundle, name: "virtualAccountPayment")
    /// Image `walkthrough1`.
    static let walkthrough1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthrough1")
    /// Image `walkthrough2`.
    static let walkthrough2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthrough2")
    /// Image `walkthrough3`.
    static let walkthrough3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthrough3")
    /// Image `walkthrough4`.
    static let walkthrough4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "walkthrough4")
    /// Image `wave`.
    static let wave = Rswift.ImageResource(bundle: R.hostingBundle, name: "wave")
    /// Image `wishlistSelected`.
    static let wishlistSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "wishlistSelected")
    /// Image `wishlistUnselected`.
    static let wishlistUnselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "wishlistUnselected")
    
    /// `UIImage(named: "Image-1", bundle: ..., traitCollection: ...)`
    static func image1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addIconColor", bundle: ..., traitCollection: ...)`
    static func addIconColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addIconColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addIconWhite", bundle: ..., traitCollection: ...)`
    static func addIconWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addIconWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "afterRegistration", bundle: ..., traitCollection: ...)`
    static func afterRegistration(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.afterRegistration, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "afterSignUp", bundle: ..., traitCollection: ...)`
    static func afterSignUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.afterSignUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowBottom", bundle: ..., traitCollection: ...)`
    static func arrowBottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowBottom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowDownWhite", bundle: ..., traitCollection: ...)`
    static func arrowDownWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDownWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowGrey", bundle: ..., traitCollection: ...)`
    static func arrowGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowGrey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowLeft", bundle: ..., traitCollection: ...)`
    static func arrowLeft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowLeft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowRight", bundle: ..., traitCollection: ...)`
    static func arrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowRightWhite", bundle: ..., traitCollection: ...)`
    static func arrowRightWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRightWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "attachCamera", bundle: ..., traitCollection: ...)`
    static func attachCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachCamera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "attachDocument", bundle: ..., traitCollection: ...)`
    static func attachDocument(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachDocument, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "attachGallery", bundle: ..., traitCollection: ...)`
    static func attachGallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachGallery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "attachIcon", bundle: ..., traitCollection: ...)`
    static func attachIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "attachLocation", bundle: ..., traitCollection: ...)`
    static func attachLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachLocation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backBlack", bundle: ..., traitCollection: ...)`
    static func backBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backWhite", bundle: ..., traitCollection: ...)`
    static func backWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "balanceColor", bundle: ..., traitCollection: ...)`
    static func balanceColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.balanceColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bca", bundle: ..., traitCollection: ...)`
    static func bca(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bca, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bgBack", bundle: ..., traitCollection: ...)`
    static func bgBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bgDecor", bundle: ..., traitCollection: ...)`
    static func bgDecor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgDecor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bgMenuLogo", bundle: ..., traitCollection: ...)`
    static func bgMenuLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgMenuLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bgSplashBackground", bundle: ..., traitCollection: ...)`
    static func bgSplashBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgSplashBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bgfront", bundle: ..., traitCollection: ...)`
    static func bgfront(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgfront, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "blankImage", bundle: ..., traitCollection: ...)`
    static func blankImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blankImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "calendarColor", bundle: ..., traitCollection: ...)`
    static func calendarColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "callBlack", bundle: ..., traitCollection: ...)`
    static func callBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.callBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "callColor", bundle: ..., traitCollection: ...)`
    static func callColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.callColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chatGrey", bundle: ..., traitCollection: ...)`
    static func chatGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatGrey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chatTheme", bundle: ..., traitCollection: ...)`
    static func chatTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatTheme, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "checklistDone", bundle: ..., traitCollection: ...)`
    static func checklistDone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checklistDone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clockDuration", bundle: ..., traitCollection: ...)`
    static func clockDuration(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clockDuration, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clockHistory", bundle: ..., traitCollection: ...)`
    static func clockHistory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clockHistory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "closeBlack", bundle: ..., traitCollection: ...)`
    static func closeBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "closeWhite", bundle: ..., traitCollection: ...)`
    static func closeWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "connectFb", bundle: ..., traitCollection: ...)`
    static func connectFb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.connectFb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "connectIG", bundle: ..., traitCollection: ...)`
    static func connectIG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.connectIG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "connectTwitter", bundle: ..., traitCollection: ...)`
    static func connectTwitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.connectTwitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "connectYoutube", bundle: ..., traitCollection: ...)`
    static func connectYoutube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.connectYoutube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contactAttachment", bundle: ..., traitCollection: ...)`
    static func contactAttachment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactAttachment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contactIcon", bundle: ..., traitCollection: ...)`
    static func contactIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "contactSend", bundle: ..., traitCollection: ...)`
    static func contactSend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactSend, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "currencyIcon", bundle: ..., traitCollection: ...)`
    static func currencyIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currencyIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "deleteColorSmall", bundle: ..., traitCollection: ...)`
    static func deleteColorSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteColorSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "deleteSmallWhite", bundle: ..., traitCollection: ...)`
    static func deleteSmallWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteSmallWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dotPurple", bundle: ..., traitCollection: ...)`
    static func dotPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dotPurple, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "editIcon", bundle: ..., traitCollection: ...)`
    static func editIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "editSmallWhite", bundle: ..., traitCollection: ...)`
    static func editSmallWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editSmallWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emptyData", bundle: ..., traitCollection: ...)`
    static func emptyData(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyData, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "errorIcon", bundle: ..., traitCollection: ...)`
    static func errorIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.errorIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eyeColor", bundle: ..., traitCollection: ...)`
    static func eyeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "favoriteSelected", bundle: ..., traitCollection: ...)`
    static func favoriteSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "favoriteUnselected", bundle: ..., traitCollection: ...)`
    static func favoriteUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favoriteUnselected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "finishOrder", bundle: ..., traitCollection: ...)`
    static func finishOrder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.finishOrder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "finishOrderSlide", bundle: ..., traitCollection: ...)`
    static func finishOrderSlide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.finishOrderSlide, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hamburgerBlack", bundle: ..., traitCollection: ...)`
    static func hamburgerBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hamburgerBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "hamburgerWhite", bundle: ..., traitCollection: ...)`
    static func hamburgerWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hamburgerWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "historyRequestOrder", bundle: ..., traitCollection: ...)`
    static func historyRequestOrder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.historyRequestOrder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icAddPackage", bundle: ..., traitCollection: ...)`
    static func icAddPackage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icAddPackage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icAddPackageGradient", bundle: ..., traitCollection: ...)`
    static func icAddPackageGradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icAddPackageGradient, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icBlock", bundle: ..., traitCollection: ...)`
    static func icBlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icBlock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icContact", bundle: ..., traitCollection: ...)`
    static func icContact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icContact, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icEditBackground", bundle: ..., traitCollection: ...)`
    static func icEditBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icEditBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icFacebook", bundle: ..., traitCollection: ...)`
    static func icFacebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icFacebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icFavorite", bundle: ..., traitCollection: ...)`
    static func icFavorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icFavorite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icFilter", bundle: ..., traitCollection: ...)`
    static func icFilter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icFilter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icFooterMenu", bundle: ..., traitCollection: ...)`
    static func icFooterMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icFooterMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icGoogle", bundle: ..., traitCollection: ...)`
    static func icGoogle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icGoogle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icHeart", bundle: ..., traitCollection: ...)`
    static func icHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icHeart, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icHideBlack", bundle: ..., traitCollection: ...)`
    static func icHideBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icHideBlack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icHideMenu", bundle: ..., traitCollection: ...)`
    static func icHideMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icHideMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icLocation", bundle: ..., traitCollection: ...)`
    static func icLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icLocation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icManage", bundle: ..., traitCollection: ...)`
    static func icManage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icManage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icMeeting", bundle: ..., traitCollection: ...)`
    static func icMeeting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMeeting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icMenuArt", bundle: ..., traitCollection: ...)`
    static func icMenuArt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenuArt, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icMenuBeauty", bundle: ..., traitCollection: ...)`
    static func icMenuBeauty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenuBeauty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icMenuBurger", bundle: ..., traitCollection: ...)`
    static func icMenuBurger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenuBurger, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icMenuEntertainment", bundle: ..., traitCollection: ...)`
    static func icMenuEntertainment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenuEntertainment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icMenuFashion", bundle: ..., traitCollection: ...)`
    static func icMenuFashion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenuFashion, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icMenuFood", bundle: ..., traitCollection: ...)`
    static func icMenuFood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenuFood, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icMenuMore", bundle: ..., traitCollection: ...)`
    static func icMenuMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenuMore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icMenuPhotography", bundle: ..., traitCollection: ...)`
    static func icMenuPhotography(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenuPhotography, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icMenuVideography", bundle: ..., traitCollection: ...)`
    static func icMenuVideography(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenuVideography, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icReport", bundle: ..., traitCollection: ...)`
    static func icReport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icReport, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icSettings", bundle: ..., traitCollection: ...)`
    static func icSettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icSettings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icShare", bundle: ..., traitCollection: ...)`
    static func icShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icShare, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icSort", bundle: ..., traitCollection: ...)`
    static func icSort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icSort, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icStarGrey", bundle: ..., traitCollection: ...)`
    static func icStarGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icStarGrey, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icStarYellow", bundle: ..., traitCollection: ...)`
    static func icStarYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icStarYellow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icTAndC", bundle: ..., traitCollection: ...)`
    static func icTAndC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icTAndC, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icUpload", bundle: ..., traitCollection: ...)`
    static func icUpload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icUpload, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icWishlist", bundle: ..., traitCollection: ...)`
    static func icWishlist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icWishlist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconAddMultiplePhotos", bundle: ..., traitCollection: ...)`
    static func iconAddMultiplePhotos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAddMultiplePhotos, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconAddPhoto", bundle: ..., traitCollection: ...)`
    static func iconAddPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAddPhoto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconBank", bundle: ..., traitCollection: ...)`
    static func iconBank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconBank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconInstagram", bundle: ..., traitCollection: ...)`
    static func iconInstagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconInstagram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconLinkedin", bundle: ..., traitCollection: ...)`
    static func iconLinkedin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLinkedin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconLove", bundle: ..., traitCollection: ...)`
    static func iconLove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLove, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconMeeting", bundle: ..., traitCollection: ...)`
    static func iconMeeting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMeeting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconWebsite", bundle: ..., traitCollection: ...)`
    static func iconWebsite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconWebsite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "iconYoutube", bundle: ..., traitCollection: ...)`
    static func iconYoutube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconYoutube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "imageSideMenu", bundle: ..., traitCollection: ...)`
    static func imageSideMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageSideMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "imageTitleIgetspot", bundle: ..., traitCollection: ...)`
    static func imageTitleIgetspot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageTitleIgetspot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "locationColor", bundle: ..., traitCollection: ...)`
    static func locationColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "locationTimeGray", bundle: ..., traitCollection: ...)`
    static func locationTimeGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationTimeGray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mapIcon", bundle: ..., traitCollection: ...)`
    static func mapIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuContactUs", bundle: ..., traitCollection: ...)`
    static func menuContactUs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuContactUs, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuFavorite", bundle: ..., traitCollection: ...)`
    static func menuFavorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuFavorite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuHelpCenter", bundle: ..., traitCollection: ...)`
    static func menuHelpCenter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuHelpCenter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuSettings", bundle: ..., traitCollection: ...)`
    static func menuSettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuSettings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuSignIn", bundle: ..., traitCollection: ...)`
    static func menuSignIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuSignIn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuTnC", bundle: ..., traitCollection: ...)`
    static func menuTnC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuTnC, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "menuWishlist", bundle: ..., traitCollection: ...)`
    static func menuWishlist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuWishlist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "myspotIntro", bundle: ..., traitCollection: ...)`
    static func myspotIntro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myspotIntro, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nextButtton", bundle: ..., traitCollection: ...)`
    static func nextButtton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextButtton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notesColor", bundle: ..., traitCollection: ...)`
    static func notesColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notesColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "parallaxHeader", bundle: ..., traitCollection: ...)`
    static func parallaxHeader(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parallaxHeader, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "paymentBank", bundle: ..., traitCollection: ...)`
    static func paymentBank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentBank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "photoIcon", bundle: ..., traitCollection: ...)`
    static func photoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pinLocationColor", bundle: ..., traitCollection: ...)`
    static func pinLocationColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinLocationColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pinLocationGray", bundle: ..., traitCollection: ...)`
    static func pinLocationGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinLocationGray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "reportConfirmationOrder", bundle: ..., traitCollection: ...)`
    static func reportConfirmationOrder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reportConfirmationOrder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selectedOrder", bundle: ..., traitCollection: ...)`
    static func selectedOrder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedOrder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sendChat", bundle: ..., traitCollection: ...)`
    static func sendChat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sendChat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "signIn", bundle: ..., traitCollection: ...)`
    static func signIn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signIn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sliderKnob", bundle: ..., traitCollection: ...)`
    static func sliderKnob(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliderKnob, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "starGreySmall", bundle: ..., traitCollection: ...)`
    static func starGreySmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starGreySmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "starYellowSmall", bundle: ..., traitCollection: ...)`
    static func starYellowSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starYellowSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabChatActive", bundle: ..., traitCollection: ...)`
    static func tabChatActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabChatActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabChatInactive", bundle: ..., traitCollection: ...)`
    static func tabChatInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabChatInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabHistoryActive", bundle: ..., traitCollection: ...)`
    static func tabHistoryActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabHistoryActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabHistoryInactive", bundle: ..., traitCollection: ...)`
    static func tabHistoryInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabHistoryInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabHomeActive", bundle: ..., traitCollection: ...)`
    static func tabHomeActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabHomeActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabHomeInactive", bundle: ..., traitCollection: ...)`
    static func tabHomeInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabHomeInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabMasterActive", bundle: ..., traitCollection: ...)`
    static func tabMasterActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabMasterActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabMasterInactive", bundle: ..., traitCollection: ...)`
    static func tabMasterInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabMasterInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabTransactionActive", bundle: ..., traitCollection: ...)`
    static func tabTransactionActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabTransactionActive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabTransactionInactive", bundle: ..., traitCollection: ...)`
    static func tabTransactionInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabTransactionInactive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thankYouPayment", bundle: ..., traitCollection: ...)`
    static func thankYouPayment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thankYouPayment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "thumbUp", bundle: ..., traitCollection: ...)`
    static func thumbUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thumbUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "timeColor", bundle: ..., traitCollection: ...)`
    static func timeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeColor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unselectedOrder", bundle: ..., traitCollection: ...)`
    static func unselectedOrder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectedOrder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "userIcon", bundle: ..., traitCollection: ...)`
    static func userIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "userPlacaholder", bundle: ..., traitCollection: ...)`
    static func userPlacaholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userPlacaholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "virtualAccountPayment", bundle: ..., traitCollection: ...)`
    static func virtualAccountPayment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.virtualAccountPayment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walkthrough1", bundle: ..., traitCollection: ...)`
    static func walkthrough1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthrough1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walkthrough2", bundle: ..., traitCollection: ...)`
    static func walkthrough2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthrough2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walkthrough3", bundle: ..., traitCollection: ...)`
    static func walkthrough3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthrough3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "walkthrough4", bundle: ..., traitCollection: ...)`
    static func walkthrough4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walkthrough4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wave", bundle: ..., traitCollection: ...)`
    static func wave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wave, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wishlistSelected", bundle: ..., traitCollection: ...)`
    static func wishlistSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wishlistSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wishlistUnselected", bundle: ..., traitCollection: ...)`
    static func wishlistUnselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wishlistUnselected, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 226 nibs.
  struct nib {
    /// Nib `AboutPage`.
    static let aboutPage = _R.nib._AboutPage()
    /// Nib `AddAnotherPackageCell`.
    static let addAnotherPackageCell = _R.nib._AddAnotherPackageCell()
    /// Nib `AgreementPage`.
    static let agreementPage = _R.nib._AgreementPage()
    /// Nib `AmountBalanceCell`.
    static let amountBalanceCell = _R.nib._AmountBalanceCell()
    /// Nib `BalanceCell`.
    static let balanceCell = _R.nib._BalanceCell()
    /// Nib `BankAccountCell`.
    static let bankAccountCell = _R.nib._BankAccountCell()
    /// Nib `BankPanelHeaderCell`.
    static let bankPanelHeaderCell = _R.nib._BankPanelHeaderCell()
    /// Nib `BlockedCell`.
    static let blockedCell = _R.nib._BlockedCell()
    /// Nib `BlockedHeader`.
    static let blockedHeader = _R.nib._BlockedHeader()
    /// Nib `BlogAddCommentPage`.
    static let blogAddCommentPage = _R.nib._BlogAddCommentPage()
    /// Nib `BlogAnotherTopicCell`.
    static let blogAnotherTopicCell = _R.nib._BlogAnotherTopicCell()
    /// Nib `BlogAnotherTopicView`.
    static let blogAnotherTopicView = _R.nib._BlogAnotherTopicView()
    /// Nib `BlogCommentCell`.
    static let blogCommentCell = _R.nib._BlogCommentCell()
    /// Nib `BlogCommentPage`.
    static let blogCommentPage = _R.nib._BlogCommentPage()
    /// Nib `BlogContentLabel`.
    static let blogContentLabel = _R.nib._BlogContentLabel()
    /// Nib `BlogDetailContentView`.
    static let blogDetailContentView = _R.nib._BlogDetailContentView()
    /// Nib `BlogDetailHeaderView`.
    static let blogDetailHeaderView = _R.nib._BlogDetailHeaderView()
    /// Nib `BlogFooterView`.
    static let blogFooterView = _R.nib._BlogFooterView()
    /// Nib `BlogListCell`.
    static let blogListCell = _R.nib._BlogListCell()
    /// Nib `BlogMorePage`.
    static let blogMorePage = _R.nib._BlogMorePage()
    /// Nib `BlogSectionSlider`.
    static let blogSectionSlider = _R.nib._BlogSectionSlider()
    /// Nib `BlogSectionTableViewCell`.
    static let blogSectionTableViewCell = _R.nib._BlogSectionTableViewCell()
    /// Nib `BrowseHelpCell`.
    static let browseHelpCell = _R.nib._BrowseHelpCell()
    /// Nib `CategoryDetailFilterTab`.
    static let categoryDetailFilterTab = _R.nib._CategoryDetailFilterTab()
    /// Nib `CategoryDetailMasterCell`.
    static let categoryDetailMasterCell = _R.nib._CategoryDetailMasterCell()
    /// Nib `CategoryDetailPackageCell`.
    static let categoryDetailPackageCell = _R.nib._CategoryDetailPackageCell()
    /// Nib `CategoryDetailParallaxHeader`.
    static let categoryDetailParallaxHeader = _R.nib._CategoryDetailParallaxHeader()
    /// Nib `CategoryFilterView`.
    static let categoryFilterView = _R.nib._CategoryFilterView()
    /// Nib `CategoryFilter`.
    static let categoryFilter = _R.nib._CategoryFilter()
    /// Nib `CategorySortView`.
    static let categorySortView = _R.nib._CategorySortView()
    /// Nib `CategorySort`.
    static let categorySort = _R.nib._CategorySort()
    /// Nib `ChatAttachView`.
    static let chatAttachView = _R.nib._ChatAttachView()
    /// Nib `ChooseBankPanelPage`.
    static let chooseBankPanelPage = _R.nib._ChooseBankPanelPage()
    /// Nib `CommentSendView`.
    static let commentSendView = _R.nib._CommentSendView()
    /// Nib `ContactUsPage`.
    static let contactUsPage = _R.nib._ContactUsPage()
    /// Nib `CurrencyPage`.
    static let currencyPage = _R.nib._CurrencyPage()
    /// Nib `CurrencyView`.
    static let currencyView = _R.nib._CurrencyView()
    /// Nib `DeactivateCell`.
    static let deactivateCell = _R.nib._DeactivateCell()
    /// Nib `DeleteOrderView`.
    static let deleteOrderView = _R.nib._DeleteOrderView()
    /// Nib `DynamicSizeCell`.
    static let dynamicSizeCell = _R.nib._DynamicSizeCell()
    /// Nib `EditAddressSearchBarPage`.
    static let editAddressSearchBarPage = _R.nib._EditAddressSearchBarPage()
    /// Nib `EditBankAccountPage`.
    static let editBankAccountPage = _R.nib._EditBankAccountPage()
    /// Nib `EditBankListPage`.
    static let editBankListPage = _R.nib._EditBankListPage()
    /// Nib `EditBlockedPage`.
    static let editBlockedPage = _R.nib._EditBlockedPage()
    /// Nib `EditProfileAddressPage`.
    static let editProfileAddressPage = _R.nib._EditProfileAddressPage()
    /// Nib `EditProfileBankView`.
    static let editProfileBankView = _R.nib._EditProfileBankView()
    /// Nib `EditProfileBasicPage`.
    static let editProfileBasicPage = _R.nib._EditProfileBasicPage()
    /// Nib `EditProfileBasicView`.
    static let editProfileBasicView = _R.nib._EditProfileBasicView()
    /// Nib `EditProfileEmailPage`.
    static let editProfileEmailPage = _R.nib._EditProfileEmailPage()
    /// Nib `EditProfileEmailView`.
    static let editProfileEmailView = _R.nib._EditProfileEmailView()
    /// Nib `EditProfileNotificationPage`.
    static let editProfileNotificationPage = _R.nib._EditProfileNotificationPage()
    /// Nib `EditProfilePasswordPage`.
    static let editProfilePasswordPage = _R.nib._EditProfilePasswordPage()
    /// Nib `EditProfilePhonePage`.
    static let editProfilePhonePage = _R.nib._EditProfilePhonePage()
    /// Nib `EditProfilePhonePassword`.
    static let editProfilePhonePassword = _R.nib._EditProfilePhonePassword()
    /// Nib `EditProfilePhoneView`.
    static let editProfilePhoneView = _R.nib._EditProfilePhoneView()
    /// Nib `EditSearchAddressPage`.
    static let editSearchAddressPage = _R.nib._EditSearchAddressPage()
    /// Nib `EmptyCell`.
    static let emptyCell = _R.nib._EmptyCell()
    /// Nib `EmptyLoadingView`.
    static let emptyLoadingView = _R.nib._EmptyLoadingView()
    /// Nib `ErrorView`.
    static let errorView = _R.nib._ErrorView()
    /// Nib `FavoriteListCell`.
    static let favoriteListCell = _R.nib._FavoriteListCell()
    /// Nib `FavoriteShareChatView`.
    static let favoriteShareChatView = _R.nib._FavoriteShareChatView()
    /// Nib `FilterRatingView`.
    static let filterRatingView = _R.nib._FilterRatingView()
    /// Nib `FloatingPanelHeaderView`.
    static let floatingPanelHeaderView = _R.nib._FloatingPanelHeaderView()
    /// Nib `FooterSectionView`.
    static let footerSectionView = _R.nib._FooterSectionView()
    /// Nib `ForgetPasswordView`.
    static let forgetPasswordView = _R.nib._ForgetPasswordView()
    /// Nib `HeaderSectionView`.
    static let headerSectionView = _R.nib._HeaderSectionView()
    /// Nib `HelpCenterPage`.
    static let helpCenterPage = _R.nib._HelpCenterPage()
    /// Nib `HelpContactUs`.
    static let helpContactUs = _R.nib._HelpContactUs()
    /// Nib `HistoryOrderIdStatusCell`.
    static let historyOrderIdStatusCell = _R.nib._HistoryOrderIdStatusCell()
    /// Nib `HistoryOrderPackageCell`.
    static let historyOrderPackageCell = _R.nib._HistoryOrderPackageCell()
    /// Nib `HomeBlogCell`.
    static let homeBlogCell = _R.nib._HomeBlogCell()
    /// Nib `HomeCategoryViewCell`.
    static let homeCategoryViewCell = _R.nib._HomeCategoryViewCell()
    /// Nib `HomeContentCell`.
    static let homeContentCell = _R.nib._HomeContentCell()
    /// Nib `IGSAlertView`.
    static let igsAlertView = _R.nib._IGSAlertView()
    /// Nib `IGSEmptyCell`.
    static let igsEmptyCell = _R.nib._IGSEmptyCell()
    /// Nib `IGSSelectCell`.
    static let igsSelectCell = _R.nib._IGSSelectCell()
    /// Nib `InfoMasterCell`.
    static let infoMasterCell = _R.nib._InfoMasterCell()
    /// Nib `InputFormCell`.
    static let inputFormCell = _R.nib._InputFormCell()
    /// Nib `ItemAddMoreCategoryCell`.
    static let itemAddMoreCategoryCell = _R.nib._ItemAddMoreCategoryCell()
    /// Nib `ItemAddPhotoCell`.
    static let itemAddPhotoCell = _R.nib._ItemAddPhotoCell()
    /// Nib `ItemTextFieldCell`.
    static let itemTextFieldCell = _R.nib._ItemTextFieldCell()
    /// Nib `LoadingCell`.
    static let loadingCell = _R.nib._LoadingCell()
    /// Nib `LoadingView`.
    static let loadingView = _R.nib._LoadingView()
    /// Nib `LocationPlaceCell`.
    static let locationPlaceCell = _R.nib._LocationPlaceCell()
    /// Nib `MarkerInfoView`.
    static let markerInfoView = _R.nib._MarkerInfoView()
    /// Nib `MasterDetailAboutDescriptionCell`.
    static let masterDetailAboutDescriptionCell = _R.nib._MasterDetailAboutDescriptionCell()
    /// Nib `MasterDetailImageHeaderView`.
    static let masterDetailImageHeaderView = _R.nib._MasterDetailImageHeaderView()
    /// Nib `MasterDetailPackageCollectionCell`.
    static let masterDetailPackageCollectionCell = _R.nib._MasterDetailPackageCollectionCell()
    /// Nib `MasterDetailPackageTableViewCell`.
    static let masterDetailPackageTableViewCell = _R.nib._MasterDetailPackageTableViewCell()
    /// Nib `MasterDetailPanelHeaderView`.
    static let masterDetailPanelHeaderView = _R.nib._MasterDetailPanelHeaderView()
    /// Nib `MasterDetailParallaxHeader`.
    static let masterDetailParallaxHeader = _R.nib._MasterDetailParallaxHeader()
    /// Nib `MasterDetailReviewCommentCell`.
    static let masterDetailReviewCommentCell = _R.nib._MasterDetailReviewCommentCell()
    /// Nib `MasterDetailReviewHeaderCell`.
    static let masterDetailReviewHeaderCell = _R.nib._MasterDetailReviewHeaderCell()
    /// Nib `MasterDetailReviewListCell`.
    static let masterDetailReviewListCell = _R.nib._MasterDetailReviewListCell()
    /// Nib `MasterDetailSectionTitleTableViewCell`.
    static let masterDetailSectionTitleTableViewCell = _R.nib._MasterDetailSectionTitleTableViewCell()
    /// Nib `MasterDetailServiceCell`.
    static let masterDetailServiceCell = _R.nib._MasterDetailServiceCell()
    /// Nib `MasterOfTheWeekCollectionViewCell`.
    static let masterOfTheWeekCollectionViewCell = _R.nib._MasterOfTheWeekCollectionViewCell()
    /// Nib `MasterOfTheWeekTableViewCell`.
    static let masterOfTheWeekTableViewCell = _R.nib._MasterOfTheWeekTableViewCell()
    /// Nib `MasterPreviewCell`.
    static let masterPreviewCell = _R.nib._MasterPreviewCell()
    /// Nib `MenuListCell`.
    static let menuListCell = _R.nib._MenuListCell()
    /// Nib `MenuProfileCell`.
    static let menuProfileCell = _R.nib._MenuProfileCell()
    /// Nib `MenuProfileTableViewCell`.
    static let menuProfileTableViewCell = _R.nib._MenuProfileTableViewCell()
    /// Nib `MenuSignInCell`.
    static let menuSignInCell = _R.nib._MenuSignInCell()
    /// Nib `MenuSocialMediaCell`.
    static let menuSocialMediaCell = _R.nib._MenuSocialMediaCell()
    /// Nib `MorePage`.
    static let morePage = _R.nib._MorePage()
    /// Nib `MySpotAddPackageCollectionCell`.
    static let mySpotAddPackageCollectionCell = _R.nib._MySpotAddPackageCollectionCell()
    /// Nib `MySpotBankCell`.
    static let mySpotBankCell = _R.nib._MySpotBankCell()
    /// Nib `MySpotDetailAddPackageCell`.
    static let mySpotDetailAddPackageCell = _R.nib._MySpotDetailAddPackageCell()
    /// Nib `MySpotDetailPackageCell`.
    static let mySpotDetailPackageCell = _R.nib._MySpotDetailPackageCell()
    /// Nib `MySpotEditView`.
    static let mySpotEditView = _R.nib._MySpotEditView()
    /// Nib `MySpotFinishConfirmationView`.
    static let mySpotFinishConfirmationView = _R.nib._MySpotFinishConfirmationView()
    /// Nib `MySpotFinishYourOrderView`.
    static let mySpotFinishYourOrderView = _R.nib._MySpotFinishYourOrderView()
    /// Nib `MySpotIntro`.
    static let mySpotIntro = _R.nib._MySpotIntro()
    /// Nib `MySpotMasterDetailAboutCell`.
    static let mySpotMasterDetailAboutCell = _R.nib._MySpotMasterDetailAboutCell()
    /// Nib `MySpotMasterDetailActionButtonCell`.
    static let mySpotMasterDetailActionButtonCell = _R.nib._MySpotMasterDetailActionButtonCell()
    /// Nib `MySpotMasterDetailHeaderView`.
    static let mySpotMasterDetailHeaderView = _R.nib._MySpotMasterDetailHeaderView()
    /// Nib `MySpotMasterDetailPackageCollectionCell`.
    static let mySpotMasterDetailPackageCollectionCell = _R.nib._MySpotMasterDetailPackageCollectionCell()
    /// Nib `MySpotMasterInfoCell`.
    static let mySpotMasterInfoCell = _R.nib._MySpotMasterInfoCell()
    /// Nib `MySpotMasterInfoView`.
    static let mySpotMasterInfoView = _R.nib._MySpotMasterInfoView()
    /// Nib `MySpotOrderCustomerCell`.
    static let mySpotOrderCustomerCell = _R.nib._MySpotOrderCustomerCell()
    /// Nib `MySpotOrderDetailConfirmDeclineCell`.
    static let mySpotOrderDetailConfirmDeclineCell = _R.nib._MySpotOrderDetailConfirmDeclineCell()
    /// Nib `MySpotOrderDetailFinishOrderCell`.
    static let mySpotOrderDetailFinishOrderCell = _R.nib._MySpotOrderDetailFinishOrderCell()
    /// Nib `MySpotOrderInformationCell`.
    static let mySpotOrderInformationCell = _R.nib._MySpotOrderInformationCell()
    /// Nib `MySpotOrderPackageCell`.
    static let mySpotOrderPackageCell = _R.nib._MySpotOrderPackageCell()
    /// Nib `MySpotOrderTotalCell`.
    static let mySpotOrderTotalCell = _R.nib._MySpotOrderTotalCell()
    /// Nib `MySpotPackagePortofolioCell`.
    static let mySpotPackagePortofolioCell = _R.nib._MySpotPackagePortofolioCell()
    /// Nib `MySpotPackagePortofolioCollectionCell`.
    static let mySpotPackagePortofolioCollectionCell = _R.nib._MySpotPackagePortofolioCollectionCell()
    /// Nib `MySpotPickerTableViewCell`.
    static let mySpotPickerTableViewCell = _R.nib._MySpotPickerTableViewCell()
    /// Nib `MySpotPickerTableView`.
    static let mySpotPickerTableView = _R.nib._MySpotPickerTableView()
    /// Nib `MySpotPickerView`.
    static let mySpotPickerView = _R.nib._MySpotPickerView()
    /// Nib `MySpotRegisterTermsConditionView`.
    static let mySpotRegisterTermsConditionView = _R.nib._MySpotRegisterTermsConditionView()
    /// Nib `MySpotRegistrationPage`.
    static let mySpotRegistrationPage = _R.nib._MySpotRegistrationPage()
    /// Nib `MySpotRegistrationStep3`.
    static let mySpotRegistrationStep3 = _R.nib._MySpotRegistrationStep3()
    /// Nib `MySpotRegistrationTellUsMore`.
    static let mySpotRegistrationTellUsMore = _R.nib._MySpotRegistrationTellUsMore()
    /// Nib `MySpotRegistrationWhatToOfferCell`.
    static let mySpotRegistrationWhatToOfferCell = _R.nib._MySpotRegistrationWhatToOfferCell()
    /// Nib `MySpotThanksPage`.
    static let mySpotThanksPage = _R.nib._MySpotThanksPage()
    /// Nib `OrderAgainCell`.
    static let orderAgainCell = _R.nib._OrderAgainCell()
    /// Nib `OrderDetailCalendarView`.
    static let orderDetailCalendarView = _R.nib._OrderDetailCalendarView()
    /// Nib `OrderDetailMasterCell`.
    static let orderDetailMasterCell = _R.nib._OrderDetailMasterCell()
    /// Nib `OrderDetailNotesView`.
    static let orderDetailNotesView = _R.nib._OrderDetailNotesView()
    /// Nib `OrderDetailSelectLocationView`.
    static let orderDetailSelectLocationView = _R.nib._OrderDetailSelectLocationView()
    /// Nib `OrderDetailTimeView`.
    static let orderDetailTimeView = _R.nib._OrderDetailTimeView()
    /// Nib `OrderHistoryListCell`.
    static let orderHistoryListCell = _R.nib._OrderHistoryListCell()
    /// Nib `OrderIDHeaderCell`.
    static let orderIDHeaderCell = _R.nib._OrderIDHeaderCell()
    /// Nib `OrderInformationCell`.
    static let orderInformationCell = _R.nib._OrderInformationCell()
    /// Nib `OrderNotesCell`.
    static let orderNotesCell = _R.nib._OrderNotesCell()
    /// Nib `OrderSectionHeaderCell`.
    static let orderSectionHeaderCell = _R.nib._OrderSectionHeaderCell()
    /// Nib `OrderSelectDateAndTimeCell`.
    static let orderSelectDateAndTimeCell = _R.nib._OrderSelectDateAndTimeCell()
    /// Nib `OrderSelectLocationCell`.
    static let orderSelectLocationCell = _R.nib._OrderSelectLocationCell()
    /// Nib `OrderStatusCell`.
    static let orderStatusCell = _R.nib._OrderStatusCell()
    /// Nib `PackageDetailDescriptionCell`.
    static let packageDetailDescriptionCell = _R.nib._PackageDetailDescriptionCell()
    /// Nib `PackageDetailInfoCell`.
    static let packageDetailInfoCell = _R.nib._PackageDetailInfoCell()
    /// Nib `PackageDetailOrderCell`.
    static let packageDetailOrderCell = _R.nib._PackageDetailOrderCell()
    /// Nib `PackageDetailPanelCell`.
    static let packageDetailPanelCell = _R.nib._PackageDetailPanelCell()
    /// Nib `PackageDetailPortofolioCell`.
    static let packageDetailPortofolioCell = _R.nib._PackageDetailPortofolioCell()
    /// Nib `PackageDetailView`.
    static let packageDetailView = _R.nib._PackageDetailView()
    /// Nib `PackageOrderCell`.
    static let packageOrderCell = _R.nib._PackageOrderCell()
    /// Nib `PackagePortofolioCollectionCell`.
    static let packagePortofolioCollectionCell = _R.nib._PackagePortofolioCollectionCell()
    /// Nib `PaymentBankCell`.
    static let paymentBankCell = _R.nib._PaymentBankCell()
    /// Nib `PaymentPayCell`.
    static let paymentPayCell = _R.nib._PaymentPayCell()
    /// Nib `PaymentVoucherCell`.
    static let paymentVoucherCell = _R.nib._PaymentVoucherCell()
    /// Nib `PleaseWaitPopUpView`.
    static let pleaseWaitPopUpView = _R.nib._PleaseWaitPopUpView()
    /// Nib `PopularResultCell`.
    static let popularResultCell = _R.nib._PopularResultCell()
    /// Nib `PopularSearchCell`.
    static let popularSearchCell = _R.nib._PopularSearchCell()
    /// Nib `PortalMySpotView`.
    static let portalMySpotView = _R.nib._PortalMySpotView()
    /// Nib `PrivacyPolicyView`.
    static let privacyPolicyView = _R.nib._PrivacyPolicyView()
    /// Nib `ProcessPaymentCell`.
    static let processPaymentCell = _R.nib._ProcessPaymentCell()
    /// Nib `ProfileEditButtonCell`.
    static let profileEditButtonCell = _R.nib._ProfileEditButtonCell()
    /// Nib `ProfileHeaderTVCell`.
    static let profileHeaderTVCell = _R.nib._ProfileHeaderTVCell()
    /// Nib `ProfileMapsCell`.
    static let profileMapsCell = _R.nib._ProfileMapsCell()
    /// Nib `ProfileMenuTVCell`.
    static let profileMenuTVCell = _R.nib._ProfileMenuTVCell()
    /// Nib `ProfileNameLabel`.
    static let profileNameLabel = _R.nib._ProfileNameLabel()
    /// Nib `ProfileNotificationCell`.
    static let profileNotificationCell = _R.nib._ProfileNotificationCell()
    /// Nib `QuestionHelpCell`.
    static let questionHelpCell = _R.nib._QuestionHelpCell()
    /// Nib `QuestionListTableCell`.
    static let questionListTableCell = _R.nib._QuestionListTableCell()
    /// Nib `RadioButtonAndTitleCell`.
    static let radioButtonAndTitleCell = _R.nib._RadioButtonAndTitleCell()
    /// Nib `RadioButtonDoubleLabelCell`.
    static let radioButtonDoubleLabelCell = _R.nib._RadioButtonDoubleLabelCell()
    /// Nib `ReasonReportView`.
    static let reasonReportView = _R.nib._ReasonReportView()
    /// Nib `RecentChatCell`.
    static let recentChatCell = _R.nib._RecentChatCell()
    /// Nib `ReportProfileFormPage`.
    static let reportProfileFormPage = _R.nib._ReportProfileFormPage()
    /// Nib `ReportProfileHeaderCell`.
    static let reportProfileHeaderCell = _R.nib._ReportProfileHeaderCell()
    /// Nib `ReportProfileItemCell`.
    static let reportProfileItemCell = _R.nib._ReportProfileItemCell()
    /// Nib `ReportThisOrderView`.
    static let reportThisOrderView = _R.nib._ReportThisOrderView()
    /// Nib `RequestWithdrawalCell`.
    static let requestWithdrawalCell = _R.nib._RequestWithdrawalCell()
    /// Nib `ResetPasswordPage`.
    static let resetPasswordPage = _R.nib._ResetPasswordPage()
    /// Nib `ReviewAndConfirmCell`.
    static let reviewAndConfirmCell = _R.nib._ReviewAndConfirmCell()
    /// Nib `ReviewAndConfirmView`.
    static let reviewAndConfirmView = _R.nib._ReviewAndConfirmView()
    /// Nib `ReviewAndReportThankYouView`.
    static let reviewAndReportThankYouView = _R.nib._ReviewAndReportThankYouView()
    /// Nib `SearchLocationPanelView`.
    static let searchLocationPanelView = _R.nib._SearchLocationPanelView()
    /// Nib `SearchView`.
    static let searchView = _R.nib._SearchView()
    /// Nib `SelectLocationPage`.
    static let selectLocationPage = _R.nib._SelectLocationPage()
    /// Nib `SelectViaMapCell`.
    static let selectViaMapCell = _R.nib._SelectViaMapCell()
    /// Nib `SelectViaMapView`.
    static let selectViaMapView = _R.nib._SelectViaMapView()
    /// Nib `SelectedImageCollectionViewCell`.
    static let selectedImageCollectionViewCell = _R.nib._SelectedImageCollectionViewCell()
    /// Nib `ServicesCategoryCellView`.
    static let servicesCategoryCellView = _R.nib._ServicesCategoryCellView()
    /// Nib `ServicesCellView`.
    static let servicesCellView = _R.nib._ServicesCellView()
    /// Nib `ServicesHeaderView`.
    static let servicesHeaderView = _R.nib._ServicesHeaderView()
    /// Nib `ServicesStackView`.
    static let servicesStackView = _R.nib._ServicesStackView()
    /// Nib `SettingPage`.
    static let settingPage = _R.nib._SettingPage()
    /// Nib `ShowImageView`.
    static let showImageView = _R.nib._ShowImageView()
    /// Nib `SideMenuPageView`.
    static let sideMenuPageView = _R.nib._SideMenuPageView()
    /// Nib `SignInPage`.
    static let signInPage = _R.nib._SignInPage()
    /// Nib `SignUpConfirmPage`.
    static let signUpConfirmPage = _R.nib._SignUpConfirmPage()
    /// Nib `SignUpPage`.
    static let signUpPage = _R.nib._SignUpPage()
    /// Nib `SkeletonLoadingCell`.
    static let skeletonLoadingCell = _R.nib._SkeletonLoadingCell()
    /// Nib `SocMedCell`.
    static let socMedCell = _R.nib._SocMedCell()
    /// Nib `SpecialDealsCollectionViewCell`.
    static let specialDealsCollectionViewCell = _R.nib._SpecialDealsCollectionViewCell()
    /// Nib `SpecialDealstableViewCell`.
    static let specialDealstableViewCell = _R.nib._SpecialDealstableViewCell()
    /// Nib `SubTotalOrderCell`.
    static let subTotalOrderCell = _R.nib._SubTotalOrderCell()
    /// Nib `TotalOrderProcessCell`.
    static let totalOrderProcessCell = _R.nib._TotalOrderProcessCell()
    /// Nib `TransactionActivePackageCell`.
    static let transactionActivePackageCell = _R.nib._TransactionActivePackageCell()
    /// Nib `TransactionDetailCell`.
    static let transactionDetailCell = _R.nib._TransactionDetailCell()
    /// Nib `TransactionDetailHelpContactStatusCell`.
    static let transactionDetailHelpContactStatusCell = _R.nib._TransactionDetailHelpContactStatusCell()
    /// Nib `TransactionDetailOrderCompleteCell`.
    static let transactionDetailOrderCompleteCell = _R.nib._TransactionDetailOrderCompleteCell()
    /// Nib `TransactionDotListCell`.
    static let transactionDotListCell = _R.nib._TransactionDotListCell()
    /// Nib `TransactionEmailCell`.
    static let transactionEmailCell = _R.nib._TransactionEmailCell()
    /// Nib `TransactionPaymentConfirmCell`.
    static let transactionPaymentConfirmCell = _R.nib._TransactionPaymentConfirmCell()
    /// Nib `TransactionStatusCell`.
    static let transactionStatusCell = _R.nib._TransactionStatusCell()
    /// Nib `TransactionThankYouCell`.
    static let transactionThankYouCell = _R.nib._TransactionThankYouCell()
    /// Nib `TransactionTotalCell`.
    static let transactionTotalCell = _R.nib._TransactionTotalCell()
    /// Nib `WalkthroughViewCell`.
    static let walkthroughViewCell = _R.nib._WalkthroughViewCell()
    /// Nib `WalkthroughView`.
    static let walkthroughView = _R.nib._WalkthroughView()
    /// Nib `WishlistCell`.
    static let wishlistCell = _R.nib._WishlistCell()
    /// Nib `WithdrawalDescriptionCell`.
    static let withdrawalDescriptionCell = _R.nib._WithdrawalDescriptionCell()
    /// Nib `WithdrawalHistoryCell`.
    static let withdrawalHistoryCell = _R.nib._WithdrawalHistoryCell()
    /// Nib `YourTransactionDetail`.
    static let yourTransactionDetail = _R.nib._YourTransactionDetail()
    
    /// `UINib(name: "AboutPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.aboutPage) instead")
    static func aboutPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutPage)
    }
    
    /// `UINib(name: "AddAnotherPackageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addAnotherPackageCell) instead")
    static func addAnotherPackageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addAnotherPackageCell)
    }
    
    /// `UINib(name: "AgreementPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.agreementPage) instead")
    static func agreementPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.agreementPage)
    }
    
    /// `UINib(name: "AmountBalanceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amountBalanceCell) instead")
    static func amountBalanceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amountBalanceCell)
    }
    
    /// `UINib(name: "BalanceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.balanceCell) instead")
    static func balanceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.balanceCell)
    }
    
    /// `UINib(name: "BankAccountCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bankAccountCell) instead")
    static func bankAccountCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bankAccountCell)
    }
    
    /// `UINib(name: "BankPanelHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bankPanelHeaderCell) instead")
    static func bankPanelHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bankPanelHeaderCell)
    }
    
    /// `UINib(name: "BlockedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blockedCell) instead")
    static func blockedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blockedCell)
    }
    
    /// `UINib(name: "BlockedHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blockedHeader) instead")
    static func blockedHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blockedHeader)
    }
    
    /// `UINib(name: "BlogAddCommentPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogAddCommentPage) instead")
    static func blogAddCommentPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogAddCommentPage)
    }
    
    /// `UINib(name: "BlogAnotherTopicCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogAnotherTopicCell) instead")
    static func blogAnotherTopicCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogAnotherTopicCell)
    }
    
    /// `UINib(name: "BlogAnotherTopicView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogAnotherTopicView) instead")
    static func blogAnotherTopicView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogAnotherTopicView)
    }
    
    /// `UINib(name: "BlogCommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogCommentCell) instead")
    static func blogCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogCommentCell)
    }
    
    /// `UINib(name: "BlogCommentPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogCommentPage) instead")
    static func blogCommentPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogCommentPage)
    }
    
    /// `UINib(name: "BlogContentLabel", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogContentLabel) instead")
    static func blogContentLabel(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogContentLabel)
    }
    
    /// `UINib(name: "BlogDetailContentView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogDetailContentView) instead")
    static func blogDetailContentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogDetailContentView)
    }
    
    /// `UINib(name: "BlogDetailHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogDetailHeaderView) instead")
    static func blogDetailHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogDetailHeaderView)
    }
    
    /// `UINib(name: "BlogFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogFooterView) instead")
    static func blogFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogFooterView)
    }
    
    /// `UINib(name: "BlogListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogListCell) instead")
    static func blogListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogListCell)
    }
    
    /// `UINib(name: "BlogMorePage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogMorePage) instead")
    static func blogMorePage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogMorePage)
    }
    
    /// `UINib(name: "BlogSectionSlider", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogSectionSlider) instead")
    static func blogSectionSlider(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogSectionSlider)
    }
    
    /// `UINib(name: "BlogSectionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.blogSectionTableViewCell) instead")
    static func blogSectionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.blogSectionTableViewCell)
    }
    
    /// `UINib(name: "BrowseHelpCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.browseHelpCell) instead")
    static func browseHelpCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.browseHelpCell)
    }
    
    /// `UINib(name: "CategoryDetailFilterTab", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryDetailFilterTab) instead")
    static func categoryDetailFilterTab(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryDetailFilterTab)
    }
    
    /// `UINib(name: "CategoryDetailMasterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryDetailMasterCell) instead")
    static func categoryDetailMasterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryDetailMasterCell)
    }
    
    /// `UINib(name: "CategoryDetailPackageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryDetailPackageCell) instead")
    static func categoryDetailPackageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryDetailPackageCell)
    }
    
    /// `UINib(name: "CategoryDetailParallaxHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryDetailParallaxHeader) instead")
    static func categoryDetailParallaxHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryDetailParallaxHeader)
    }
    
    /// `UINib(name: "CategoryFilter", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryFilter) instead")
    static func categoryFilter(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryFilter)
    }
    
    /// `UINib(name: "CategoryFilterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryFilterView) instead")
    static func categoryFilterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryFilterView)
    }
    
    /// `UINib(name: "CategorySort", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categorySort) instead")
    static func categorySort(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categorySort)
    }
    
    /// `UINib(name: "CategorySortView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categorySortView) instead")
    static func categorySortView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categorySortView)
    }
    
    /// `UINib(name: "ChatAttachView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chatAttachView) instead")
    static func chatAttachView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chatAttachView)
    }
    
    /// `UINib(name: "ChooseBankPanelPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chooseBankPanelPage) instead")
    static func chooseBankPanelPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chooseBankPanelPage)
    }
    
    /// `UINib(name: "CommentSendView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commentSendView) instead")
    static func commentSendView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commentSendView)
    }
    
    /// `UINib(name: "ContactUsPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contactUsPage) instead")
    static func contactUsPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contactUsPage)
    }
    
    /// `UINib(name: "CurrencyPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currencyPage) instead")
    static func currencyPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currencyPage)
    }
    
    /// `UINib(name: "CurrencyView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.currencyView) instead")
    static func currencyView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.currencyView)
    }
    
    /// `UINib(name: "DeactivateCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deactivateCell) instead")
    static func deactivateCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deactivateCell)
    }
    
    /// `UINib(name: "DeleteOrderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deleteOrderView) instead")
    static func deleteOrderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deleteOrderView)
    }
    
    /// `UINib(name: "DynamicSizeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dynamicSizeCell) instead")
    static func dynamicSizeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dynamicSizeCell)
    }
    
    /// `UINib(name: "EditAddressSearchBarPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editAddressSearchBarPage) instead")
    static func editAddressSearchBarPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editAddressSearchBarPage)
    }
    
    /// `UINib(name: "EditBankAccountPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editBankAccountPage) instead")
    static func editBankAccountPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editBankAccountPage)
    }
    
    /// `UINib(name: "EditBankListPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editBankListPage) instead")
    static func editBankListPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editBankListPage)
    }
    
    /// `UINib(name: "EditBlockedPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editBlockedPage) instead")
    static func editBlockedPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editBlockedPage)
    }
    
    /// `UINib(name: "EditProfileAddressPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileAddressPage) instead")
    static func editProfileAddressPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileAddressPage)
    }
    
    /// `UINib(name: "EditProfileBankView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileBankView) instead")
    static func editProfileBankView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileBankView)
    }
    
    /// `UINib(name: "EditProfileBasicPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileBasicPage) instead")
    static func editProfileBasicPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileBasicPage)
    }
    
    /// `UINib(name: "EditProfileBasicView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileBasicView) instead")
    static func editProfileBasicView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileBasicView)
    }
    
    /// `UINib(name: "EditProfileEmailPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileEmailPage) instead")
    static func editProfileEmailPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileEmailPage)
    }
    
    /// `UINib(name: "EditProfileEmailView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileEmailView) instead")
    static func editProfileEmailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileEmailView)
    }
    
    /// `UINib(name: "EditProfileNotificationPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfileNotificationPage) instead")
    static func editProfileNotificationPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfileNotificationPage)
    }
    
    /// `UINib(name: "EditProfilePasswordPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfilePasswordPage) instead")
    static func editProfilePasswordPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfilePasswordPage)
    }
    
    /// `UINib(name: "EditProfilePhonePage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfilePhonePage) instead")
    static func editProfilePhonePage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfilePhonePage)
    }
    
    /// `UINib(name: "EditProfilePhonePassword", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfilePhonePassword) instead")
    static func editProfilePhonePassword(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfilePhonePassword)
    }
    
    /// `UINib(name: "EditProfilePhoneView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editProfilePhoneView) instead")
    static func editProfilePhoneView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editProfilePhoneView)
    }
    
    /// `UINib(name: "EditSearchAddressPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.editSearchAddressPage) instead")
    static func editSearchAddressPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editSearchAddressPage)
    }
    
    /// `UINib(name: "EmptyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyCell) instead")
    static func emptyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyCell)
    }
    
    /// `UINib(name: "EmptyLoadingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyLoadingView) instead")
    static func emptyLoadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyLoadingView)
    }
    
    /// `UINib(name: "ErrorView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.errorView) instead")
    static func errorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.errorView)
    }
    
    /// `UINib(name: "FavoriteListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favoriteListCell) instead")
    static func favoriteListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favoriteListCell)
    }
    
    /// `UINib(name: "FavoriteShareChatView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favoriteShareChatView) instead")
    static func favoriteShareChatView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favoriteShareChatView)
    }
    
    /// `UINib(name: "FilterRatingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.filterRatingView) instead")
    static func filterRatingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.filterRatingView)
    }
    
    /// `UINib(name: "FloatingPanelHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.floatingPanelHeaderView) instead")
    static func floatingPanelHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.floatingPanelHeaderView)
    }
    
    /// `UINib(name: "FooterSectionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.footerSectionView) instead")
    static func footerSectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.footerSectionView)
    }
    
    /// `UINib(name: "ForgetPasswordView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.forgetPasswordView) instead")
    static func forgetPasswordView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.forgetPasswordView)
    }
    
    /// `UINib(name: "HeaderSectionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.headerSectionView) instead")
    static func headerSectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.headerSectionView)
    }
    
    /// `UINib(name: "HelpCenterPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.helpCenterPage) instead")
    static func helpCenterPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.helpCenterPage)
    }
    
    /// `UINib(name: "HelpContactUs", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.helpContactUs) instead")
    static func helpContactUs(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.helpContactUs)
    }
    
    /// `UINib(name: "HistoryOrderIdStatusCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.historyOrderIdStatusCell) instead")
    static func historyOrderIdStatusCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyOrderIdStatusCell)
    }
    
    /// `UINib(name: "HistoryOrderPackageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.historyOrderPackageCell) instead")
    static func historyOrderPackageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.historyOrderPackageCell)
    }
    
    /// `UINib(name: "HomeBlogCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeBlogCell) instead")
    static func homeBlogCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeBlogCell)
    }
    
    /// `UINib(name: "HomeCategoryViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeCategoryViewCell) instead")
    static func homeCategoryViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeCategoryViewCell)
    }
    
    /// `UINib(name: "HomeContentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeContentCell) instead")
    static func homeContentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeContentCell)
    }
    
    /// `UINib(name: "IGSAlertView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.igsAlertView) instead")
    static func igsAlertView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.igsAlertView)
    }
    
    /// `UINib(name: "IGSEmptyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.igsEmptyCell) instead")
    static func igsEmptyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.igsEmptyCell)
    }
    
    /// `UINib(name: "IGSSelectCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.igsSelectCell) instead")
    static func igsSelectCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.igsSelectCell)
    }
    
    /// `UINib(name: "InfoMasterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.infoMasterCell) instead")
    static func infoMasterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.infoMasterCell)
    }
    
    /// `UINib(name: "InputFormCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.inputFormCell) instead")
    static func inputFormCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inputFormCell)
    }
    
    /// `UINib(name: "ItemAddMoreCategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemAddMoreCategoryCell) instead")
    static func itemAddMoreCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemAddMoreCategoryCell)
    }
    
    /// `UINib(name: "ItemAddPhotoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemAddPhotoCell) instead")
    static func itemAddPhotoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemAddPhotoCell)
    }
    
    /// `UINib(name: "ItemTextFieldCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemTextFieldCell) instead")
    static func itemTextFieldCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTextFieldCell)
    }
    
    /// `UINib(name: "LoadingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingCell) instead")
    static func loadingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingCell)
    }
    
    /// `UINib(name: "LoadingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingView) instead")
    static func loadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingView)
    }
    
    /// `UINib(name: "LocationPlaceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.locationPlaceCell) instead")
    static func locationPlaceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.locationPlaceCell)
    }
    
    /// `UINib(name: "MarkerInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.markerInfoView) instead")
    static func markerInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.markerInfoView)
    }
    
    /// `UINib(name: "MasterDetailAboutDescriptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailAboutDescriptionCell) instead")
    static func masterDetailAboutDescriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailAboutDescriptionCell)
    }
    
    /// `UINib(name: "MasterDetailImageHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailImageHeaderView) instead")
    static func masterDetailImageHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailImageHeaderView)
    }
    
    /// `UINib(name: "MasterDetailPackageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailPackageCollectionCell) instead")
    static func masterDetailPackageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailPackageCollectionCell)
    }
    
    /// `UINib(name: "MasterDetailPackageTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailPackageTableViewCell) instead")
    static func masterDetailPackageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailPackageTableViewCell)
    }
    
    /// `UINib(name: "MasterDetailPanelHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailPanelHeaderView) instead")
    static func masterDetailPanelHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailPanelHeaderView)
    }
    
    /// `UINib(name: "MasterDetailParallaxHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailParallaxHeader) instead")
    static func masterDetailParallaxHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailParallaxHeader)
    }
    
    /// `UINib(name: "MasterDetailReviewCommentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailReviewCommentCell) instead")
    static func masterDetailReviewCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailReviewCommentCell)
    }
    
    /// `UINib(name: "MasterDetailReviewHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailReviewHeaderCell) instead")
    static func masterDetailReviewHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailReviewHeaderCell)
    }
    
    /// `UINib(name: "MasterDetailReviewListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailReviewListCell) instead")
    static func masterDetailReviewListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailReviewListCell)
    }
    
    /// `UINib(name: "MasterDetailSectionTitleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailSectionTitleTableViewCell) instead")
    static func masterDetailSectionTitleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailSectionTitleTableViewCell)
    }
    
    /// `UINib(name: "MasterDetailServiceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterDetailServiceCell) instead")
    static func masterDetailServiceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterDetailServiceCell)
    }
    
    /// `UINib(name: "MasterOfTheWeekCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterOfTheWeekCollectionViewCell) instead")
    static func masterOfTheWeekCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterOfTheWeekCollectionViewCell)
    }
    
    /// `UINib(name: "MasterOfTheWeekTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterOfTheWeekTableViewCell) instead")
    static func masterOfTheWeekTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterOfTheWeekTableViewCell)
    }
    
    /// `UINib(name: "MasterPreviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.masterPreviewCell) instead")
    static func masterPreviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.masterPreviewCell)
    }
    
    /// `UINib(name: "MenuListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuListCell) instead")
    static func menuListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuListCell)
    }
    
    /// `UINib(name: "MenuProfileCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuProfileCell) instead")
    static func menuProfileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuProfileCell)
    }
    
    /// `UINib(name: "MenuProfileTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuProfileTableViewCell) instead")
    static func menuProfileTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuProfileTableViewCell)
    }
    
    /// `UINib(name: "MenuSignInCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuSignInCell) instead")
    static func menuSignInCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuSignInCell)
    }
    
    /// `UINib(name: "MenuSocialMediaCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuSocialMediaCell) instead")
    static func menuSocialMediaCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuSocialMediaCell)
    }
    
    /// `UINib(name: "MorePage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.morePage) instead")
    static func morePage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.morePage)
    }
    
    /// `UINib(name: "MySpotAddPackageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotAddPackageCollectionCell) instead")
    static func mySpotAddPackageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotAddPackageCollectionCell)
    }
    
    /// `UINib(name: "MySpotBankCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotBankCell) instead")
    static func mySpotBankCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotBankCell)
    }
    
    /// `UINib(name: "MySpotDetailAddPackageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotDetailAddPackageCell) instead")
    static func mySpotDetailAddPackageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotDetailAddPackageCell)
    }
    
    /// `UINib(name: "MySpotDetailPackageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotDetailPackageCell) instead")
    static func mySpotDetailPackageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotDetailPackageCell)
    }
    
    /// `UINib(name: "MySpotEditView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotEditView) instead")
    static func mySpotEditView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotEditView)
    }
    
    /// `UINib(name: "MySpotFinishConfirmationView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotFinishConfirmationView) instead")
    static func mySpotFinishConfirmationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotFinishConfirmationView)
    }
    
    /// `UINib(name: "MySpotFinishYourOrderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotFinishYourOrderView) instead")
    static func mySpotFinishYourOrderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotFinishYourOrderView)
    }
    
    /// `UINib(name: "MySpotIntro", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotIntro) instead")
    static func mySpotIntro(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotIntro)
    }
    
    /// `UINib(name: "MySpotMasterDetailAboutCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotMasterDetailAboutCell) instead")
    static func mySpotMasterDetailAboutCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotMasterDetailAboutCell)
    }
    
    /// `UINib(name: "MySpotMasterDetailActionButtonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotMasterDetailActionButtonCell) instead")
    static func mySpotMasterDetailActionButtonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotMasterDetailActionButtonCell)
    }
    
    /// `UINib(name: "MySpotMasterDetailHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotMasterDetailHeaderView) instead")
    static func mySpotMasterDetailHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotMasterDetailHeaderView)
    }
    
    /// `UINib(name: "MySpotMasterDetailPackageCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotMasterDetailPackageCollectionCell) instead")
    static func mySpotMasterDetailPackageCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotMasterDetailPackageCollectionCell)
    }
    
    /// `UINib(name: "MySpotMasterInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotMasterInfoCell) instead")
    static func mySpotMasterInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotMasterInfoCell)
    }
    
    /// `UINib(name: "MySpotMasterInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotMasterInfoView) instead")
    static func mySpotMasterInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotMasterInfoView)
    }
    
    /// `UINib(name: "MySpotOrderCustomerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotOrderCustomerCell) instead")
    static func mySpotOrderCustomerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotOrderCustomerCell)
    }
    
    /// `UINib(name: "MySpotOrderDetailConfirmDeclineCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotOrderDetailConfirmDeclineCell) instead")
    static func mySpotOrderDetailConfirmDeclineCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotOrderDetailConfirmDeclineCell)
    }
    
    /// `UINib(name: "MySpotOrderDetailFinishOrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotOrderDetailFinishOrderCell) instead")
    static func mySpotOrderDetailFinishOrderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotOrderDetailFinishOrderCell)
    }
    
    /// `UINib(name: "MySpotOrderInformationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotOrderInformationCell) instead")
    static func mySpotOrderInformationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotOrderInformationCell)
    }
    
    /// `UINib(name: "MySpotOrderPackageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotOrderPackageCell) instead")
    static func mySpotOrderPackageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotOrderPackageCell)
    }
    
    /// `UINib(name: "MySpotOrderTotalCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotOrderTotalCell) instead")
    static func mySpotOrderTotalCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotOrderTotalCell)
    }
    
    /// `UINib(name: "MySpotPackagePortofolioCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotPackagePortofolioCell) instead")
    static func mySpotPackagePortofolioCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotPackagePortofolioCell)
    }
    
    /// `UINib(name: "MySpotPackagePortofolioCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotPackagePortofolioCollectionCell) instead")
    static func mySpotPackagePortofolioCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotPackagePortofolioCollectionCell)
    }
    
    /// `UINib(name: "MySpotPickerTableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotPickerTableView) instead")
    static func mySpotPickerTableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotPickerTableView)
    }
    
    /// `UINib(name: "MySpotPickerTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotPickerTableViewCell) instead")
    static func mySpotPickerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotPickerTableViewCell)
    }
    
    /// `UINib(name: "MySpotPickerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotPickerView) instead")
    static func mySpotPickerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotPickerView)
    }
    
    /// `UINib(name: "MySpotRegisterTermsConditionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotRegisterTermsConditionView) instead")
    static func mySpotRegisterTermsConditionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotRegisterTermsConditionView)
    }
    
    /// `UINib(name: "MySpotRegistrationPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotRegistrationPage) instead")
    static func mySpotRegistrationPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotRegistrationPage)
    }
    
    /// `UINib(name: "MySpotRegistrationStep3", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotRegistrationStep3) instead")
    static func mySpotRegistrationStep3(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotRegistrationStep3)
    }
    
    /// `UINib(name: "MySpotRegistrationTellUsMore", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotRegistrationTellUsMore) instead")
    static func mySpotRegistrationTellUsMore(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotRegistrationTellUsMore)
    }
    
    /// `UINib(name: "MySpotRegistrationWhatToOfferCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotRegistrationWhatToOfferCell) instead")
    static func mySpotRegistrationWhatToOfferCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotRegistrationWhatToOfferCell)
    }
    
    /// `UINib(name: "MySpotThanksPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mySpotThanksPage) instead")
    static func mySpotThanksPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mySpotThanksPage)
    }
    
    /// `UINib(name: "OrderAgainCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderAgainCell) instead")
    static func orderAgainCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderAgainCell)
    }
    
    /// `UINib(name: "OrderDetailCalendarView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderDetailCalendarView) instead")
    static func orderDetailCalendarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDetailCalendarView)
    }
    
    /// `UINib(name: "OrderDetailMasterCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderDetailMasterCell) instead")
    static func orderDetailMasterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDetailMasterCell)
    }
    
    /// `UINib(name: "OrderDetailNotesView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderDetailNotesView) instead")
    static func orderDetailNotesView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDetailNotesView)
    }
    
    /// `UINib(name: "OrderDetailSelectLocationView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderDetailSelectLocationView) instead")
    static func orderDetailSelectLocationView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDetailSelectLocationView)
    }
    
    /// `UINib(name: "OrderDetailTimeView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderDetailTimeView) instead")
    static func orderDetailTimeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDetailTimeView)
    }
    
    /// `UINib(name: "OrderHistoryListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderHistoryListCell) instead")
    static func orderHistoryListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderHistoryListCell)
    }
    
    /// `UINib(name: "OrderIDHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderIDHeaderCell) instead")
    static func orderIDHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderIDHeaderCell)
    }
    
    /// `UINib(name: "OrderInformationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderInformationCell) instead")
    static func orderInformationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderInformationCell)
    }
    
    /// `UINib(name: "OrderNotesCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderNotesCell) instead")
    static func orderNotesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderNotesCell)
    }
    
    /// `UINib(name: "OrderSectionHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderSectionHeaderCell) instead")
    static func orderSectionHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderSectionHeaderCell)
    }
    
    /// `UINib(name: "OrderSelectDateAndTimeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderSelectDateAndTimeCell) instead")
    static func orderSelectDateAndTimeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderSelectDateAndTimeCell)
    }
    
    /// `UINib(name: "OrderSelectLocationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderSelectLocationCell) instead")
    static func orderSelectLocationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderSelectLocationCell)
    }
    
    /// `UINib(name: "OrderStatusCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderStatusCell) instead")
    static func orderStatusCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderStatusCell)
    }
    
    /// `UINib(name: "PackageDetailDescriptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.packageDetailDescriptionCell) instead")
    static func packageDetailDescriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.packageDetailDescriptionCell)
    }
    
    /// `UINib(name: "PackageDetailInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.packageDetailInfoCell) instead")
    static func packageDetailInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.packageDetailInfoCell)
    }
    
    /// `UINib(name: "PackageDetailOrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.packageDetailOrderCell) instead")
    static func packageDetailOrderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.packageDetailOrderCell)
    }
    
    /// `UINib(name: "PackageDetailPanelCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.packageDetailPanelCell) instead")
    static func packageDetailPanelCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.packageDetailPanelCell)
    }
    
    /// `UINib(name: "PackageDetailPortofolioCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.packageDetailPortofolioCell) instead")
    static func packageDetailPortofolioCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.packageDetailPortofolioCell)
    }
    
    /// `UINib(name: "PackageDetailView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.packageDetailView) instead")
    static func packageDetailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.packageDetailView)
    }
    
    /// `UINib(name: "PackageOrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.packageOrderCell) instead")
    static func packageOrderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.packageOrderCell)
    }
    
    /// `UINib(name: "PackagePortofolioCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.packagePortofolioCollectionCell) instead")
    static func packagePortofolioCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.packagePortofolioCollectionCell)
    }
    
    /// `UINib(name: "PaymentBankCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentBankCell) instead")
    static func paymentBankCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentBankCell)
    }
    
    /// `UINib(name: "PaymentPayCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentPayCell) instead")
    static func paymentPayCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentPayCell)
    }
    
    /// `UINib(name: "PaymentVoucherCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.paymentVoucherCell) instead")
    static func paymentVoucherCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.paymentVoucherCell)
    }
    
    /// `UINib(name: "PleaseWaitPopUpView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pleaseWaitPopUpView) instead")
    static func pleaseWaitPopUpView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pleaseWaitPopUpView)
    }
    
    /// `UINib(name: "PopularResultCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popularResultCell) instead")
    static func popularResultCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popularResultCell)
    }
    
    /// `UINib(name: "PopularSearchCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popularSearchCell) instead")
    static func popularSearchCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popularSearchCell)
    }
    
    /// `UINib(name: "PortalMySpotView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.portalMySpotView) instead")
    static func portalMySpotView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.portalMySpotView)
    }
    
    /// `UINib(name: "PrivacyPolicyView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.privacyPolicyView) instead")
    static func privacyPolicyView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.privacyPolicyView)
    }
    
    /// `UINib(name: "ProcessPaymentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.processPaymentCell) instead")
    static func processPaymentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.processPaymentCell)
    }
    
    /// `UINib(name: "ProfileEditButtonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileEditButtonCell) instead")
    static func profileEditButtonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileEditButtonCell)
    }
    
    /// `UINib(name: "ProfileHeaderTVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileHeaderTVCell) instead")
    static func profileHeaderTVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileHeaderTVCell)
    }
    
    /// `UINib(name: "ProfileMapsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileMapsCell) instead")
    static func profileMapsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileMapsCell)
    }
    
    /// `UINib(name: "ProfileMenuTVCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileMenuTVCell) instead")
    static func profileMenuTVCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileMenuTVCell)
    }
    
    /// `UINib(name: "ProfileNameLabel", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileNameLabel) instead")
    static func profileNameLabel(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileNameLabel)
    }
    
    /// `UINib(name: "ProfileNotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileNotificationCell) instead")
    static func profileNotificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileNotificationCell)
    }
    
    /// `UINib(name: "QuestionHelpCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionHelpCell) instead")
    static func questionHelpCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionHelpCell)
    }
    
    /// `UINib(name: "QuestionListTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionListTableCell) instead")
    static func questionListTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionListTableCell)
    }
    
    /// `UINib(name: "RadioButtonAndTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.radioButtonAndTitleCell) instead")
    static func radioButtonAndTitleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.radioButtonAndTitleCell)
    }
    
    /// `UINib(name: "RadioButtonDoubleLabelCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.radioButtonDoubleLabelCell) instead")
    static func radioButtonDoubleLabelCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.radioButtonDoubleLabelCell)
    }
    
    /// `UINib(name: "ReasonReportView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reasonReportView) instead")
    static func reasonReportView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reasonReportView)
    }
    
    /// `UINib(name: "RecentChatCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recentChatCell) instead")
    static func recentChatCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recentChatCell)
    }
    
    /// `UINib(name: "ReportProfileFormPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reportProfileFormPage) instead")
    static func reportProfileFormPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reportProfileFormPage)
    }
    
    /// `UINib(name: "ReportProfileHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reportProfileHeaderCell) instead")
    static func reportProfileHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reportProfileHeaderCell)
    }
    
    /// `UINib(name: "ReportProfileItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reportProfileItemCell) instead")
    static func reportProfileItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reportProfileItemCell)
    }
    
    /// `UINib(name: "ReportThisOrderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reportThisOrderView) instead")
    static func reportThisOrderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reportThisOrderView)
    }
    
    /// `UINib(name: "RequestWithdrawalCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.requestWithdrawalCell) instead")
    static func requestWithdrawalCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.requestWithdrawalCell)
    }
    
    /// `UINib(name: "ResetPasswordPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.resetPasswordPage) instead")
    static func resetPasswordPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.resetPasswordPage)
    }
    
    /// `UINib(name: "ReviewAndConfirmCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reviewAndConfirmCell) instead")
    static func reviewAndConfirmCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reviewAndConfirmCell)
    }
    
    /// `UINib(name: "ReviewAndConfirmView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reviewAndConfirmView) instead")
    static func reviewAndConfirmView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reviewAndConfirmView)
    }
    
    /// `UINib(name: "ReviewAndReportThankYouView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.reviewAndReportThankYouView) instead")
    static func reviewAndReportThankYouView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reviewAndReportThankYouView)
    }
    
    /// `UINib(name: "SearchLocationPanelView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchLocationPanelView) instead")
    static func searchLocationPanelView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchLocationPanelView)
    }
    
    /// `UINib(name: "SearchView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchView) instead")
    static func searchView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchView)
    }
    
    /// `UINib(name: "SelectLocationPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectLocationPage) instead")
    static func selectLocationPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectLocationPage)
    }
    
    /// `UINib(name: "SelectViaMapCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectViaMapCell) instead")
    static func selectViaMapCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectViaMapCell)
    }
    
    /// `UINib(name: "SelectViaMapView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectViaMapView) instead")
    static func selectViaMapView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectViaMapView)
    }
    
    /// `UINib(name: "SelectedImageCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectedImageCollectionViewCell) instead")
    static func selectedImageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectedImageCollectionViewCell)
    }
    
    /// `UINib(name: "ServicesCategoryCellView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.servicesCategoryCellView) instead")
    static func servicesCategoryCellView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.servicesCategoryCellView)
    }
    
    /// `UINib(name: "ServicesCellView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.servicesCellView) instead")
    static func servicesCellView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.servicesCellView)
    }
    
    /// `UINib(name: "ServicesHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.servicesHeaderView) instead")
    static func servicesHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.servicesHeaderView)
    }
    
    /// `UINib(name: "ServicesStackView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.servicesStackView) instead")
    static func servicesStackView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.servicesStackView)
    }
    
    /// `UINib(name: "SettingPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingPage) instead")
    static func settingPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingPage)
    }
    
    /// `UINib(name: "ShowImageView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.showImageView) instead")
    static func showImageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.showImageView)
    }
    
    /// `UINib(name: "SideMenuPageView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sideMenuPageView) instead")
    static func sideMenuPageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sideMenuPageView)
    }
    
    /// `UINib(name: "SignInPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signInPage) instead")
    static func signInPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signInPage)
    }
    
    /// `UINib(name: "SignUpConfirmPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signUpConfirmPage) instead")
    static func signUpConfirmPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signUpConfirmPage)
    }
    
    /// `UINib(name: "SignUpPage", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signUpPage) instead")
    static func signUpPage(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signUpPage)
    }
    
    /// `UINib(name: "SkeletonLoadingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.skeletonLoadingCell) instead")
    static func skeletonLoadingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.skeletonLoadingCell)
    }
    
    /// `UINib(name: "SocMedCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.socMedCell) instead")
    static func socMedCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.socMedCell)
    }
    
    /// `UINib(name: "SpecialDealsCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.specialDealsCollectionViewCell) instead")
    static func specialDealsCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.specialDealsCollectionViewCell)
    }
    
    /// `UINib(name: "SpecialDealstableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.specialDealstableViewCell) instead")
    static func specialDealstableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.specialDealstableViewCell)
    }
    
    /// `UINib(name: "SubTotalOrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subTotalOrderCell) instead")
    static func subTotalOrderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subTotalOrderCell)
    }
    
    /// `UINib(name: "TotalOrderProcessCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.totalOrderProcessCell) instead")
    static func totalOrderProcessCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.totalOrderProcessCell)
    }
    
    /// `UINib(name: "TransactionActivePackageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionActivePackageCell) instead")
    static func transactionActivePackageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionActivePackageCell)
    }
    
    /// `UINib(name: "TransactionDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionDetailCell) instead")
    static func transactionDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionDetailCell)
    }
    
    /// `UINib(name: "TransactionDetailHelpContactStatusCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionDetailHelpContactStatusCell) instead")
    static func transactionDetailHelpContactStatusCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionDetailHelpContactStatusCell)
    }
    
    /// `UINib(name: "TransactionDetailOrderCompleteCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionDetailOrderCompleteCell) instead")
    static func transactionDetailOrderCompleteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionDetailOrderCompleteCell)
    }
    
    /// `UINib(name: "TransactionDotListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionDotListCell) instead")
    static func transactionDotListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionDotListCell)
    }
    
    /// `UINib(name: "TransactionEmailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionEmailCell) instead")
    static func transactionEmailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionEmailCell)
    }
    
    /// `UINib(name: "TransactionPaymentConfirmCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionPaymentConfirmCell) instead")
    static func transactionPaymentConfirmCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionPaymentConfirmCell)
    }
    
    /// `UINib(name: "TransactionStatusCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionStatusCell) instead")
    static func transactionStatusCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionStatusCell)
    }
    
    /// `UINib(name: "TransactionThankYouCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionThankYouCell) instead")
    static func transactionThankYouCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionThankYouCell)
    }
    
    /// `UINib(name: "TransactionTotalCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionTotalCell) instead")
    static func transactionTotalCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionTotalCell)
    }
    
    /// `UINib(name: "WalkthroughView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walkthroughView) instead")
    static func walkthroughView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walkthroughView)
    }
    
    /// `UINib(name: "WalkthroughViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walkthroughViewCell) instead")
    static func walkthroughViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walkthroughViewCell)
    }
    
    /// `UINib(name: "WishlistCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.wishlistCell) instead")
    static func wishlistCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wishlistCell)
    }
    
    /// `UINib(name: "WithdrawalDescriptionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.withdrawalDescriptionCell) instead")
    static func withdrawalDescriptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.withdrawalDescriptionCell)
    }
    
    /// `UINib(name: "WithdrawalHistoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.withdrawalHistoryCell) instead")
    static func withdrawalHistoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.withdrawalHistoryCell)
    }
    
    /// `UINib(name: "YourTransactionDetail", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yourTransactionDetail) instead")
    static func yourTransactionDetail(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yourTransactionDetail)
    }
    
    static func aboutPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutPage? {
      return R.nib.aboutPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutPage
    }
    
    static func addAnotherPackageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddAnotherPackageCell? {
      return R.nib.addAnotherPackageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddAnotherPackageCell
    }
    
    static func agreementPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AgreementPage? {
      return R.nib.agreementPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AgreementPage
    }
    
    static func amountBalanceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmountBalanceCell? {
      return R.nib.amountBalanceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmountBalanceCell
    }
    
    static func balanceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BalanceCell? {
      return R.nib.balanceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BalanceCell
    }
    
    static func bankAccountCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BankAccountCell? {
      return R.nib.bankAccountCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankAccountCell
    }
    
    static func bankPanelHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BankPanelHeaderCell? {
      return R.nib.bankPanelHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankPanelHeaderCell
    }
    
    static func blockedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlockedCell? {
      return R.nib.blockedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlockedCell
    }
    
    static func blockedHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlockedHeader? {
      return R.nib.blockedHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlockedHeader
    }
    
    static func blogAddCommentPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogAddCommentPage? {
      return R.nib.blogAddCommentPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogAddCommentPage
    }
    
    static func blogAnotherTopicCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogAnotherTopicCell? {
      return R.nib.blogAnotherTopicCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogAnotherTopicCell
    }
    
    static func blogAnotherTopicView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogAnotherTopicListCell? {
      return R.nib.blogAnotherTopicView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogAnotherTopicListCell
    }
    
    static func blogCommentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogCommentCell? {
      return R.nib.blogCommentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogCommentCell
    }
    
    static func blogCommentPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogCommentPage? {
      return R.nib.blogCommentPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogCommentPage
    }
    
    static func blogContentLabel(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogContentLabel? {
      return R.nib.blogContentLabel.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogContentLabel
    }
    
    static func blogDetailContentView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogDetailContentCell? {
      return R.nib.blogDetailContentView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogDetailContentCell
    }
    
    static func blogDetailHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogDetailHeaderCell? {
      return R.nib.blogDetailHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogDetailHeaderCell
    }
    
    static func blogFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogFooterView? {
      return R.nib.blogFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogFooterView
    }
    
    static func blogListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogListCell? {
      return R.nib.blogListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogListCell
    }
    
    static func blogMorePage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogMorePage? {
      return R.nib.blogMorePage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogMorePage
    }
    
    static func blogSectionSlider(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogSectionSlider? {
      return R.nib.blogSectionSlider.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogSectionSlider
    }
    
    static func blogSectionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogSectionTableViewCell? {
      return R.nib.blogSectionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogSectionTableViewCell
    }
    
    static func browseHelpCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BrowseHelpCell? {
      return R.nib.browseHelpCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BrowseHelpCell
    }
    
    static func categoryDetailFilterTab(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.categoryDetailFilterTab.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func categoryDetailMasterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryDetailMasterCell? {
      return R.nib.categoryDetailMasterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryDetailMasterCell
    }
    
    static func categoryDetailPackageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryDetailPackageCell? {
      return R.nib.categoryDetailPackageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryDetailPackageCell
    }
    
    static func categoryDetailParallaxHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryDetailParallaxHeader? {
      return R.nib.categoryDetailParallaxHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryDetailParallaxHeader
    }
    
    static func categoryFilter(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryFilter? {
      return R.nib.categoryFilter.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryFilter
    }
    
    static func categoryFilterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.categoryFilterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func categorySort(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategorySort? {
      return R.nib.categorySort.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategorySort
    }
    
    static func categorySortView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.categorySortView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func chatAttachView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatAttachView? {
      return R.nib.chatAttachView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatAttachView
    }
    
    static func chooseBankPanelPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChooseBankPanelPage? {
      return R.nib.chooseBankPanelPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChooseBankPanelPage
    }
    
    static func commentSendView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.commentSendView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func contactUsPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactUsPage? {
      return R.nib.contactUsPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactUsPage
    }
    
    static func currencyPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyPage? {
      return R.nib.currencyPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyPage
    }
    
    static func currencyView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyView? {
      return R.nib.currencyView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyView
    }
    
    static func deactivateCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeactivateCell? {
      return R.nib.deactivateCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeactivateCell
    }
    
    static func deleteOrderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.deleteOrderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func dynamicSizeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DynamicSizeCell? {
      return R.nib.dynamicSizeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DynamicSizeCell
    }
    
    static func editAddressSearchBarPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditAddressSearchBarPage? {
      return R.nib.editAddressSearchBarPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditAddressSearchBarPage
    }
    
    static func editBankAccountPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditBankAccountPage? {
      return R.nib.editBankAccountPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditBankAccountPage
    }
    
    static func editBankListPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditBankListPage? {
      return R.nib.editBankListPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditBankListPage
    }
    
    static func editBlockedPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditBlockedPage? {
      return R.nib.editBlockedPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditBlockedPage
    }
    
    static func editProfileAddressPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileAddressPage? {
      return R.nib.editProfileAddressPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileAddressPage
    }
    
    static func editProfileBankView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditBankAccountPage? {
      return R.nib.editProfileBankView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditBankAccountPage
    }
    
    static func editProfileBasicPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileBasicPage? {
      return R.nib.editProfileBasicPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileBasicPage
    }
    
    static func editProfileBasicView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileBasicPage? {
      return R.nib.editProfileBasicView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileBasicPage
    }
    
    static func editProfileEmailPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileEmailPage? {
      return R.nib.editProfileEmailPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileEmailPage
    }
    
    static func editProfileEmailView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileEmailPage? {
      return R.nib.editProfileEmailView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileEmailPage
    }
    
    static func editProfileNotificationPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileNotificationPage? {
      return R.nib.editProfileNotificationPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileNotificationPage
    }
    
    static func editProfilePasswordPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfilePasswordPage? {
      return R.nib.editProfilePasswordPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfilePasswordPage
    }
    
    static func editProfilePhonePage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfilePhonePage? {
      return R.nib.editProfilePhonePage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfilePhonePage
    }
    
    static func editProfilePhonePassword(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfilePasswordPage? {
      return R.nib.editProfilePhonePassword.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfilePasswordPage
    }
    
    static func editProfilePhoneView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfilePhonePage? {
      return R.nib.editProfilePhoneView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfilePhonePage
    }
    
    static func editSearchAddressPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditSearchAddressPage? {
      return R.nib.editSearchAddressPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditSearchAddressPage
    }
    
    static func emptyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EmptyCell? {
      return R.nib.emptyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyCell
    }
    
    static func emptyLoadingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.emptyLoadingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func errorView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.errorView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func favoriteListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavoriteListCell? {
      return R.nib.favoriteListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoriteListCell
    }
    
    static func favoriteShareChatView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.favoriteShareChatView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func filterRatingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.filterRatingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func floatingPanelHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.floatingPanelHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func footerSectionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.footerSectionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func forgetPasswordView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ForgetPasswordView? {
      return R.nib.forgetPasswordView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForgetPasswordView
    }
    
    static func headerSectionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.headerSectionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func helpCenterPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HelpCenterPage? {
      return R.nib.helpCenterPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HelpCenterPage
    }
    
    static func helpContactUs(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HelpContactUs? {
      return R.nib.helpContactUs.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HelpContactUs
    }
    
    static func historyOrderIdStatusCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryOrderIdStatusCell? {
      return R.nib.historyOrderIdStatusCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryOrderIdStatusCell
    }
    
    static func historyOrderPackageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryOrderPackageCell? {
      return R.nib.historyOrderPackageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryOrderPackageCell
    }
    
    static func homeBlogCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBlogCell? {
      return R.nib.homeBlogCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBlogCell
    }
    
    static func homeCategoryViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCategoryViewCell? {
      return R.nib.homeCategoryViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCategoryViewCell
    }
    
    static func homeContentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeContentCell? {
      return R.nib.homeContentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeContentCell
    }
    
    static func igsAlertView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IGSAlertView? {
      return R.nib.igsAlertView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IGSAlertView
    }
    
    static func igsEmptyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IGSEmptyCell? {
      return R.nib.igsEmptyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IGSEmptyCell
    }
    
    static func igsSelectCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IGSSelectCell? {
      return R.nib.igsSelectCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IGSSelectCell
    }
    
    static func infoMasterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoMasterCell? {
      return R.nib.infoMasterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoMasterCell
    }
    
    static func inputFormCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InputFormCell? {
      return R.nib.inputFormCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InputFormCell
    }
    
    static func itemAddMoreCategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemAddMoreCategoryCell? {
      return R.nib.itemAddMoreCategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemAddMoreCategoryCell
    }
    
    static func itemAddPhotoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemAddPhotoCell? {
      return R.nib.itemAddPhotoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemAddPhotoCell
    }
    
    static func itemTextFieldCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemTextFieldCell? {
      return R.nib.itemTextFieldCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTextFieldCell
    }
    
    static func loadingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingCell? {
      return R.nib.loadingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingCell
    }
    
    static func loadingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingView? {
      return R.nib.loadingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingView
    }
    
    static func locationPlaceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LocationPlaceCell? {
      return R.nib.locationPlaceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LocationPlaceCell
    }
    
    static func markerInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MarkerInfoView? {
      return R.nib.markerInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MarkerInfoView
    }
    
    static func masterDetailAboutDescriptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailAboutDescriptionCell? {
      return R.nib.masterDetailAboutDescriptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailAboutDescriptionCell
    }
    
    static func masterDetailImageHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.masterDetailImageHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func masterDetailPackageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailPackageCollectionCell? {
      return R.nib.masterDetailPackageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailPackageCollectionCell
    }
    
    static func masterDetailPackageTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailPackageTableViewCell? {
      return R.nib.masterDetailPackageTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailPackageTableViewCell
    }
    
    static func masterDetailPanelHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.masterDetailPanelHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func masterDetailParallaxHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailParallaxHeader? {
      return R.nib.masterDetailParallaxHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailParallaxHeader
    }
    
    static func masterDetailReviewCommentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailReviewCommentCell? {
      return R.nib.masterDetailReviewCommentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailReviewCommentCell
    }
    
    static func masterDetailReviewHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailReviewHeaderCell? {
      return R.nib.masterDetailReviewHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailReviewHeaderCell
    }
    
    static func masterDetailReviewListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailReviewListCell? {
      return R.nib.masterDetailReviewListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailReviewListCell
    }
    
    static func masterDetailSectionTitleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailSectionTitleTableViewCell? {
      return R.nib.masterDetailSectionTitleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailSectionTitleTableViewCell
    }
    
    static func masterDetailServiceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailServiceCell? {
      return R.nib.masterDetailServiceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailServiceCell
    }
    
    static func masterOfTheWeekCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterOfTheWeekCollectionViewCell? {
      return R.nib.masterOfTheWeekCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterOfTheWeekCollectionViewCell
    }
    
    static func masterOfTheWeekTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterOfTheWeekTableViewCell? {
      return R.nib.masterOfTheWeekTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterOfTheWeekTableViewCell
    }
    
    static func masterPreviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterPreviewCell? {
      return R.nib.masterPreviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterPreviewCell
    }
    
    static func menuListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuListCell? {
      return R.nib.menuListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuListCell
    }
    
    static func menuProfileCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuProfileCell? {
      return R.nib.menuProfileCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuProfileCell
    }
    
    static func menuProfileTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuProfileTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func menuSignInCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuSignInCell? {
      return R.nib.menuSignInCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuSignInCell
    }
    
    static func menuSocialMediaCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuSocialMediaCell? {
      return R.nib.menuSocialMediaCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuSocialMediaCell
    }
    
    static func morePage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MorePage? {
      return R.nib.morePage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MorePage
    }
    
    static func mySpotAddPackageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotAddPackageCollectionCell? {
      return R.nib.mySpotAddPackageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotAddPackageCollectionCell
    }
    
    static func mySpotBankCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotBankCell? {
      return R.nib.mySpotBankCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotBankCell
    }
    
    static func mySpotDetailAddPackageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotDetailAddPackageCell? {
      return R.nib.mySpotDetailAddPackageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotDetailAddPackageCell
    }
    
    static func mySpotDetailPackageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotDetailPackageCell? {
      return R.nib.mySpotDetailPackageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotDetailPackageCell
    }
    
    static func mySpotEditView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mySpotEditView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func mySpotFinishConfirmationView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mySpotFinishConfirmationView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func mySpotFinishYourOrderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mySpotFinishYourOrderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func mySpotIntro(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotIntro? {
      return R.nib.mySpotIntro.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotIntro
    }
    
    static func mySpotMasterDetailAboutCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotMasterDetailAboutCell? {
      return R.nib.mySpotMasterDetailAboutCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotMasterDetailAboutCell
    }
    
    static func mySpotMasterDetailActionButtonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotMasterDetailActionButtonCell? {
      return R.nib.mySpotMasterDetailActionButtonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotMasterDetailActionButtonCell
    }
    
    static func mySpotMasterDetailHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mySpotMasterDetailHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func mySpotMasterDetailPackageCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotMasterDetailPackageCollectionCell? {
      return R.nib.mySpotMasterDetailPackageCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotMasterDetailPackageCollectionCell
    }
    
    static func mySpotMasterInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotMasterInfoCell? {
      return R.nib.mySpotMasterInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotMasterInfoCell
    }
    
    static func mySpotMasterInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mySpotMasterInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func mySpotOrderCustomerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderCustomerCell? {
      return R.nib.mySpotOrderCustomerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderCustomerCell
    }
    
    static func mySpotOrderDetailConfirmDeclineCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderDetailConfirmDeclineCell? {
      return R.nib.mySpotOrderDetailConfirmDeclineCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderDetailConfirmDeclineCell
    }
    
    static func mySpotOrderDetailFinishOrderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderDetailFinishOrderCell? {
      return R.nib.mySpotOrderDetailFinishOrderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderDetailFinishOrderCell
    }
    
    static func mySpotOrderInformationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderInformationCell? {
      return R.nib.mySpotOrderInformationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderInformationCell
    }
    
    static func mySpotOrderPackageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderPackageCell? {
      return R.nib.mySpotOrderPackageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderPackageCell
    }
    
    static func mySpotOrderTotalCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderTotalCell? {
      return R.nib.mySpotOrderTotalCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderTotalCell
    }
    
    static func mySpotPackagePortofolioCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotPackagePortofolioCell? {
      return R.nib.mySpotPackagePortofolioCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotPackagePortofolioCell
    }
    
    static func mySpotPackagePortofolioCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotPackagePortofolioCollectionCell? {
      return R.nib.mySpotPackagePortofolioCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotPackagePortofolioCollectionCell
    }
    
    static func mySpotPickerTableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotPickerTableView? {
      return R.nib.mySpotPickerTableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotPickerTableView
    }
    
    static func mySpotPickerTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotPickerTableViewCell? {
      return R.nib.mySpotPickerTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotPickerTableViewCell
    }
    
    static func mySpotPickerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotPickerView? {
      return R.nib.mySpotPickerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotPickerView
    }
    
    static func mySpotRegisterTermsConditionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mySpotRegisterTermsConditionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func mySpotRegistrationPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotRegistrationPage? {
      return R.nib.mySpotRegistrationPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotRegistrationPage
    }
    
    static func mySpotRegistrationStep3(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotRegistrationStep3? {
      return R.nib.mySpotRegistrationStep3.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotRegistrationStep3
    }
    
    static func mySpotRegistrationTellUsMore(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotRegistrationTellUsMore? {
      return R.nib.mySpotRegistrationTellUsMore.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotRegistrationTellUsMore
    }
    
    static func mySpotRegistrationWhatToOfferCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotRegistrationWhatToOfferCell? {
      return R.nib.mySpotRegistrationWhatToOfferCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotRegistrationWhatToOfferCell
    }
    
    static func mySpotThanksPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mySpotThanksPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func orderAgainCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderAgainCell? {
      return R.nib.orderAgainCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderAgainCell
    }
    
    static func orderDetailCalendarView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.orderDetailCalendarView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func orderDetailMasterCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderDetailMasterCell? {
      return R.nib.orderDetailMasterCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDetailMasterCell
    }
    
    static func orderDetailNotesView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.orderDetailNotesView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func orderDetailSelectLocationView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.orderDetailSelectLocationView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func orderDetailTimeView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.orderDetailTimeView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func orderHistoryListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderHistoryListCell? {
      return R.nib.orderHistoryListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderHistoryListCell
    }
    
    static func orderIDHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderIDHeaderCell? {
      return R.nib.orderIDHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderIDHeaderCell
    }
    
    static func orderInformationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderInformationCell? {
      return R.nib.orderInformationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderInformationCell
    }
    
    static func orderNotesCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderNotesCell? {
      return R.nib.orderNotesCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderNotesCell
    }
    
    static func orderSectionHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderSectionHeaderCell? {
      return R.nib.orderSectionHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSectionHeaderCell
    }
    
    static func orderSelectDateAndTimeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderSelectDateAndTimeCell? {
      return R.nib.orderSelectDateAndTimeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSelectDateAndTimeCell
    }
    
    static func orderSelectLocationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderSelectLocationCell? {
      return R.nib.orderSelectLocationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSelectLocationCell
    }
    
    static func orderStatusCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderStatusCell? {
      return R.nib.orderStatusCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderStatusCell
    }
    
    static func packageDetailDescriptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageDetailDescriptionCell? {
      return R.nib.packageDetailDescriptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageDetailDescriptionCell
    }
    
    static func packageDetailInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageDetailInfoCell? {
      return R.nib.packageDetailInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageDetailInfoCell
    }
    
    static func packageDetailOrderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageDetailOrderCell? {
      return R.nib.packageDetailOrderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageDetailOrderCell
    }
    
    static func packageDetailPanelCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageDetailPanelCell? {
      return R.nib.packageDetailPanelCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageDetailPanelCell
    }
    
    static func packageDetailPortofolioCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageDetailPortofolioCell? {
      return R.nib.packageDetailPortofolioCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageDetailPortofolioCell
    }
    
    static func packageDetailView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.packageDetailView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func packageOrderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageOrderCell? {
      return R.nib.packageOrderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageOrderCell
    }
    
    static func packagePortofolioCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackagePortofolioCollectionCell? {
      return R.nib.packagePortofolioCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackagePortofolioCollectionCell
    }
    
    static func paymentBankCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentBankCell? {
      return R.nib.paymentBankCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentBankCell
    }
    
    static func paymentPayCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentPayCell? {
      return R.nib.paymentPayCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentPayCell
    }
    
    static func paymentVoucherCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentVoucherCell? {
      return R.nib.paymentVoucherCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentVoucherCell
    }
    
    static func pleaseWaitPopUpView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PleaseWaitPopUpView? {
      return R.nib.pleaseWaitPopUpView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PleaseWaitPopUpView
    }
    
    static func popularResultCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopularResultCell? {
      return R.nib.popularResultCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopularResultCell
    }
    
    static func popularSearchCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopularSearchCell? {
      return R.nib.popularSearchCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopularSearchCell
    }
    
    static func portalMySpotView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.portalMySpotView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func privacyPolicyView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrivacyPolicyView? {
      return R.nib.privacyPolicyView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrivacyPolicyView
    }
    
    static func processPaymentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProcessPaymentCell? {
      return R.nib.processPaymentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProcessPaymentCell
    }
    
    static func profileEditButtonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileEditButtonCell? {
      return R.nib.profileEditButtonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileEditButtonCell
    }
    
    static func profileHeaderTVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileHeaderTVCell? {
      return R.nib.profileHeaderTVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileHeaderTVCell
    }
    
    static func profileMapsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileMapsCell? {
      return R.nib.profileMapsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileMapsCell
    }
    
    static func profileMenuTVCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileMenuTVCell? {
      return R.nib.profileMenuTVCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileMenuTVCell
    }
    
    static func profileNameLabel(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileNameLabel? {
      return R.nib.profileNameLabel.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileNameLabel
    }
    
    static func profileNotificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileNotificationCell? {
      return R.nib.profileNotificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileNotificationCell
    }
    
    static func questionHelpCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionHelpCell? {
      return R.nib.questionHelpCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionHelpCell
    }
    
    static func questionListTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionListTableCell? {
      return R.nib.questionListTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionListTableCell
    }
    
    static func radioButtonAndTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RadioButtonAndTitleCell? {
      return R.nib.radioButtonAndTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RadioButtonAndTitleCell
    }
    
    static func radioButtonDoubleLabelCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RadioButtonDoubleLabelCell? {
      return R.nib.radioButtonDoubleLabelCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RadioButtonDoubleLabelCell
    }
    
    static func reasonReportView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReasonReportView? {
      return R.nib.reasonReportView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReasonReportView
    }
    
    static func recentChatCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecentChatCell? {
      return R.nib.recentChatCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentChatCell
    }
    
    static func reportProfileFormPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReportProfileFormPage? {
      return R.nib.reportProfileFormPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportProfileFormPage
    }
    
    static func reportProfileHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReportProfileHeaderCell? {
      return R.nib.reportProfileHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportProfileHeaderCell
    }
    
    static func reportProfileItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReportProfileItemCell? {
      return R.nib.reportProfileItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportProfileItemCell
    }
    
    static func reportThisOrderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.reportThisOrderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func requestWithdrawalCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestWithdrawalCell? {
      return R.nib.requestWithdrawalCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestWithdrawalCell
    }
    
    static func resetPasswordPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResetPasswordPage? {
      return R.nib.resetPasswordPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResetPasswordPage
    }
    
    static func reviewAndConfirmCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReviewAndConfirmCell? {
      return R.nib.reviewAndConfirmCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewAndConfirmCell
    }
    
    static func reviewAndConfirmView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.reviewAndConfirmView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func reviewAndReportThankYouView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.reviewAndReportThankYouView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func searchLocationPanelView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchLocationPanelView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func searchView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchView? {
      return R.nib.searchView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchView
    }
    
    static func selectLocationPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectLocationPage? {
      return R.nib.selectLocationPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectLocationPage
    }
    
    static func selectViaMapCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectViaMapCell? {
      return R.nib.selectViaMapCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectViaMapCell
    }
    
    static func selectViaMapView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.selectViaMapView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func selectedImageCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectedImageCollectionViewCell? {
      return R.nib.selectedImageCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectedImageCollectionViewCell
    }
    
    static func servicesCategoryCellView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServicesCategoryCellView? {
      return R.nib.servicesCategoryCellView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServicesCategoryCellView
    }
    
    static func servicesCellView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServicesCellView? {
      return R.nib.servicesCellView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServicesCellView
    }
    
    static func servicesHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServicesHeaderView? {
      return R.nib.servicesHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServicesHeaderView
    }
    
    static func servicesStackView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServicesStackView? {
      return R.nib.servicesStackView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServicesStackView
    }
    
    static func settingPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingPage? {
      return R.nib.settingPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingPage
    }
    
    static func showImageView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShowImageView? {
      return R.nib.showImageView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShowImageView
    }
    
    static func sideMenuPageView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.sideMenuPageView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func signInPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignInPage? {
      return R.nib.signInPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignInPage
    }
    
    static func signUpConfirmPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignUpConfirmPage? {
      return R.nib.signUpConfirmPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignUpConfirmPage
    }
    
    static func signUpPage(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignUpPage? {
      return R.nib.signUpPage.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignUpPage
    }
    
    static func skeletonLoadingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SkeletonLoadingCell? {
      return R.nib.skeletonLoadingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SkeletonLoadingCell
    }
    
    static func socMedCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocMedCell? {
      return R.nib.socMedCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocMedCell
    }
    
    static func specialDealsCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpecialDealsCollectionViewCell? {
      return R.nib.specialDealsCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpecialDealsCollectionViewCell
    }
    
    static func specialDealstableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpecialDealstableViewCell? {
      return R.nib.specialDealstableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpecialDealstableViewCell
    }
    
    static func subTotalOrderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubTotalOrderCell? {
      return R.nib.subTotalOrderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubTotalOrderCell
    }
    
    static func totalOrderProcessCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TotalOrderProcessCell? {
      return R.nib.totalOrderProcessCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TotalOrderProcessCell
    }
    
    static func transactionActivePackageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionActivePackageCell? {
      return R.nib.transactionActivePackageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionActivePackageCell
    }
    
    static func transactionDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailCell? {
      return R.nib.transactionDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailCell
    }
    
    static func transactionDetailHelpContactStatusCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailHelpContactStatusCell? {
      return R.nib.transactionDetailHelpContactStatusCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailHelpContactStatusCell
    }
    
    static func transactionDetailOrderCompleteCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailOrderCompleteCell? {
      return R.nib.transactionDetailOrderCompleteCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailOrderCompleteCell
    }
    
    static func transactionDotListCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDotListCell? {
      return R.nib.transactionDotListCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDotListCell
    }
    
    static func transactionEmailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionEmailCell? {
      return R.nib.transactionEmailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionEmailCell
    }
    
    static func transactionPaymentConfirmCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionPaymentConfirmCell? {
      return R.nib.transactionPaymentConfirmCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionPaymentConfirmCell
    }
    
    static func transactionStatusCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionStatusCell? {
      return R.nib.transactionStatusCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionStatusCell
    }
    
    static func transactionThankYouCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionThankYouCell? {
      return R.nib.transactionThankYouCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionThankYouCell
    }
    
    static func transactionTotalCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTotalCell? {
      return R.nib.transactionTotalCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTotalCell
    }
    
    static func walkthroughView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.walkthroughView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func walkthroughViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalkthroughViewCell? {
      return R.nib.walkthroughViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalkthroughViewCell
    }
    
    static func wishlistCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WishlistCell? {
      return R.nib.wishlistCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WishlistCell
    }
    
    static func withdrawalDescriptionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WithdrawalDescriptionCell? {
      return R.nib.withdrawalDescriptionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WithdrawalDescriptionCell
    }
    
    static func withdrawalHistoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WithdrawalHistoryCell? {
      return R.nib.withdrawalHistoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WithdrawalHistoryCell
    }
    
    static func yourTransactionDetail(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YourTransactionDetail? {
      return R.nib.yourTransactionDetail.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YourTransactionDetail
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 7 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BlogAnotherTopicCellIdentifier`.
    static let blogAnotherTopicCellIdentifier: Rswift.ReuseIdentifier<BlogAnotherTopicCell> = Rswift.ReuseIdentifier(identifier: "BlogAnotherTopicCellIdentifier")
    /// Reuse identifier `HomeBlogCellIdentifier`.
    static let homeBlogCellIdentifier: Rswift.ReuseIdentifier<HomeBlogCell> = Rswift.ReuseIdentifier(identifier: "HomeBlogCellIdentifier")
    /// Reuse identifier `HomeCategoryViewCellIdentifier`.
    static let homeCategoryViewCellIdentifier: Rswift.ReuseIdentifier<HomeCategoryViewCell> = Rswift.ReuseIdentifier(identifier: "HomeCategoryViewCellIdentifier")
    /// Reuse identifier `IGSSelectCell`.
    static let igsSelectCell: Rswift.ReuseIdentifier<IGSSelectCell> = Rswift.ReuseIdentifier(identifier: "IGSSelectCell")
    /// Reuse identifier `MySpotMasterDetailPackageCollectionCell`.
    static let mySpotMasterDetailPackageCollectionCell: Rswift.ReuseIdentifier<MySpotMasterDetailPackageCollectionCell> = Rswift.ReuseIdentifier(identifier: "MySpotMasterDetailPackageCollectionCell")
    /// Reuse identifier `RadioButtonAndTitleCell`.
    static let radioButtonAndTitleCell: Rswift.ReuseIdentifier<RadioButtonAndTitleCell> = Rswift.ReuseIdentifier(identifier: "RadioButtonAndTitleCell")
    /// Reuse identifier `WalkthroughViewCellIdentifier`.
    static let walkthroughViewCellIdentifier: Rswift.ReuseIdentifier<WalkthroughViewCell> = Rswift.ReuseIdentifier(identifier: "WalkthroughViewCellIdentifier")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AboutPage.validate()
      try _BalanceCell.validate()
      try _BankAccountCell.validate()
      try _BankPanelHeaderCell.validate()
      try _BlogCommentPage.validate()
      try _BlogFooterView.validate()
      try _BlogMorePage.validate()
      try _CategoryDetailFilterTab.validate()
      try _CategoryDetailPackageCell.validate()
      try _CategoryFilter.validate()
      try _CategoryFilterView.validate()
      try _CategorySort.validate()
      try _CategorySortView.validate()
      try _ChatAttachView.validate()
      try _ChooseBankPanelPage.validate()
      try _ContactUsPage.validate()
      try _CurrencyPage.validate()
      try _CurrencyView.validate()
      try _EditBankListPage.validate()
      try _EditSearchAddressPage.validate()
      try _FavoriteListCell.validate()
      try _FavoriteShareChatView.validate()
      try _FilterRatingView.validate()
      try _FloatingPanelHeaderView.validate()
      try _ForgetPasswordView.validate()
      try _HomeContentCell.validate()
      try _IGSEmptyCell.validate()
      try _IGSSelectCell.validate()
      try _InfoMasterCell.validate()
      try _ItemAddPhotoCell.validate()
      try _LocationPlaceCell.validate()
      try _MarkerInfoView.validate()
      try _MasterDetailImageHeaderView.validate()
      try _MasterDetailPanelHeaderView.validate()
      try _MasterDetailParallaxHeader.validate()
      try _MasterDetailReviewCommentCell.validate()
      try _MasterDetailReviewHeaderCell.validate()
      try _MasterDetailReviewListCell.validate()
      try _MenuListCell.validate()
      try _MenuProfileTableViewCell.validate()
      try _MenuSignInCell.validate()
      try _MenuSocialMediaCell.validate()
      try _MorePage.validate()
      try _MySpotAddPackageCollectionCell.validate()
      try _MySpotBankCell.validate()
      try _MySpotDetailAddPackageCell.validate()
      try _MySpotFinishConfirmationView.validate()
      try _MySpotFinishYourOrderView.validate()
      try _MySpotMasterDetailAboutCell.validate()
      try _MySpotMasterDetailPackageCollectionCell.validate()
      try _MySpotMasterInfoView.validate()
      try _MySpotOrderDetailFinishOrderCell.validate()
      try _MySpotOrderPackageCell.validate()
      try _MySpotPackagePortofolioCollectionCell.validate()
      try _MySpotPickerView.validate()
      try _MySpotRegistrationStep3.validate()
      try _MySpotRegistrationTellUsMore.validate()
      try _OrderDetailCalendarView.validate()
      try _OrderDetailNotesView.validate()
      try _OrderDetailSelectLocationView.validate()
      try _OrderDetailTimeView.validate()
      try _OrderHistoryListCell.validate()
      try _OrderIDHeaderCell.validate()
      try _OrderNotesCell.validate()
      try _OrderSelectDateAndTimeCell.validate()
      try _OrderSelectLocationCell.validate()
      try _PackageDetailDescriptionCell.validate()
      try _PackageDetailInfoCell.validate()
      try _PackageDetailPanelCell.validate()
      try _PackageDetailView.validate()
      try _PackageOrderCell.validate()
      try _PaymentBankCell.validate()
      try _PaymentVoucherCell.validate()
      try _PopularResultCell.validate()
      try _ProfileHeaderTVCell.validate()
      try _ProfileMenuTVCell.validate()
      try _ReasonReportView.validate()
      try _RecentChatCell.validate()
      try _ReportProfileItemCell.validate()
      try _ReportThisOrderView.validate()
      try _ReviewAndConfirmView.validate()
      try _SearchLocationPanelView.validate()
      try _SearchView.validate()
      try _SelectViaMapCell.validate()
      try _SelectViaMapView.validate()
      try _SelectedImageCollectionViewCell.validate()
      try _ServicesCellView.validate()
      try _ServicesHeaderView.validate()
      try _SideMenuPageView.validate()
      try _SignInPage.validate()
      try _SignUpConfirmPage.validate()
      try _SignUpPage.validate()
      try _SocMedCell.validate()
      try _TransactionActivePackageCell.validate()
      try _WishlistCell.validate()
    }
    
    struct _AboutPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AboutPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "connectFb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'connectFb' is used in nib 'AboutPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "connectIG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'connectIG' is used in nib 'AboutPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "connectTwitter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'connectTwitter' is used in nib 'AboutPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "connectYoutube", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'connectYoutube' is used in nib 'AboutPage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _AddAnotherPackageCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddAnotherPackageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddAnotherPackageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddAnotherPackageCell
      }
      
      fileprivate init() {}
    }
    
    struct _AgreementPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AgreementPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AgreementPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AgreementPage
      }
      
      fileprivate init() {}
    }
    
    struct _AmountBalanceCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AmountBalanceCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmountBalanceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmountBalanceCell
      }
      
      fileprivate init() {}
    }
    
    struct _BalanceCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BalanceCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BalanceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BalanceCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "balanceColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'balanceColor' is used in nib 'BalanceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BankAccountCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BankAccountCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BankAccountCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankAccountCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "userIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userIcon' is used in nib 'BankAccountCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BankPanelHeaderCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BankPanelHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BankPanelHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankPanelHeaderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'BankPanelHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconBank", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBank' is used in nib 'BankPanelHeaderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BlockedCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlockedCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlockedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlockedCell
      }
      
      fileprivate init() {}
    }
    
    struct _BlockedHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlockedHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlockedHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlockedHeader
      }
      
      fileprivate init() {}
    }
    
    struct _BlogAddCommentPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlogAddCommentPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogAddCommentPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogAddCommentPage
      }
      
      fileprivate init() {}
    }
    
    struct _BlogAnotherTopicCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BlogAnotherTopicCell
      
      let bundle = R.hostingBundle
      let identifier = "BlogAnotherTopicCellIdentifier"
      let name = "BlogAnotherTopicCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogAnotherTopicCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogAnotherTopicCell
      }
      
      fileprivate init() {}
    }
    
    struct _BlogAnotherTopicView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlogAnotherTopicView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogAnotherTopicListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogAnotherTopicListCell
      }
      
      fileprivate init() {}
    }
    
    struct _BlogCommentCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlogCommentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogCommentCell
      }
      
      fileprivate init() {}
    }
    
    struct _BlogCommentPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BlogCommentPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogCommentPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogCommentPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'BlogCommentPage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BlogContentLabel: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlogContentLabel"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogContentLabel? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogContentLabel
      }
      
      fileprivate init() {}
    }
    
    struct _BlogDetailContentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlogDetailContentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogDetailContentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogDetailContentCell
      }
      
      fileprivate init() {}
    }
    
    struct _BlogDetailHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlogDetailHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogDetailHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogDetailHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _BlogFooterView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BlogFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogFooterView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "backBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backBlack' is used in nib 'BlogFooterView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icShare", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icShare' is used in nib 'BlogFooterView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BlogListCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlogListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogListCell
      }
      
      fileprivate init() {}
    }
    
    struct _BlogMorePage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BlogMorePage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogMorePage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogMorePage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'BlogMorePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icShare", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icShare' is used in nib 'BlogMorePage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _BlogSectionSlider: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlogSectionSlider"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogSectionSlider? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogSectionSlider
      }
      
      fileprivate init() {}
    }
    
    struct _BlogSectionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BlogSectionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BlogSectionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BlogSectionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _BrowseHelpCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BrowseHelpCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BrowseHelpCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BrowseHelpCell
      }
      
      fileprivate init() {}
    }
    
    struct _CategoryDetailFilterTab: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CategoryDetailFilterTab"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icFilter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icFilter' is used in nib 'CategoryDetailFilterTab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icShare", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icShare' is used in nib 'CategoryDetailFilterTab', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icSort", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icSort' is used in nib 'CategoryDetailFilterTab', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CategoryDetailMasterCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryDetailMasterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryDetailMasterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryDetailMasterCell
      }
      
      fileprivate init() {}
    }
    
    struct _CategoryDetailPackageCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CategoryDetailPackageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryDetailPackageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryDetailPackageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pinLocationGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pinLocationGray' is used in nib 'CategoryDetailPackageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "starGreySmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starGreySmall' is used in nib 'CategoryDetailPackageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "starYellowSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starYellowSmall' is used in nib 'CategoryDetailPackageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CategoryDetailParallaxHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryDetailParallaxHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryDetailParallaxHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryDetailParallaxHeader
      }
      
      fileprivate init() {}
    }
    
    struct _CategoryFilter: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CategoryFilter"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryFilter? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryFilter
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowBottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowBottom' is used in nib 'CategoryFilter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icFavorite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icFavorite' is used in nib 'CategoryFilter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'CategoryFilter', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CategoryFilterView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CategoryFilterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'CategoryFilterView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CategorySort: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CategorySort"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategorySort? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategorySort
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'CategorySort', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CategorySortView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CategorySortView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'CategorySortView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChatAttachView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChatAttachView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChatAttachView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChatAttachView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "attachCamera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachCamera' is used in nib 'ChatAttachView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "attachDocument", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachDocument' is used in nib 'ChatAttachView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "attachGallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachGallery' is used in nib 'ChatAttachView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "attachIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachIcon' is used in nib 'ChatAttachView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "attachLocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachLocation' is used in nib 'ChatAttachView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'ChatAttachView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ChooseBankPanelPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChooseBankPanelPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ChooseBankPanelPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChooseBankPanelPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'ChooseBankPanelPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'ChooseBankPanelPage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CommentSendView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CommentSendView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ContactUsPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ContactUsPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContactUsPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContactUsPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "contactAttachment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contactAttachment' is used in nib 'ContactUsPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "contactIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contactIcon' is used in nib 'ContactUsPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "contactSend", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contactSend' is used in nib 'ContactUsPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'ContactUsPage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CurrencyPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CurrencyPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "currencyIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'currencyIcon' is used in nib 'CurrencyPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'CurrencyPage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _CurrencyView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CurrencyView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CurrencyView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CurrencyView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "currencyIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'currencyIcon' is used in nib 'CurrencyView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'CurrencyView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _DeactivateCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DeactivateCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeactivateCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeactivateCell
      }
      
      fileprivate init() {}
    }
    
    struct _DeleteOrderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DeleteOrderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DynamicSizeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DynamicSizeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DynamicSizeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DynamicSizeCell
      }
      
      fileprivate init() {}
    }
    
    struct _EditAddressSearchBarPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditAddressSearchBarPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditAddressSearchBarPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditAddressSearchBarPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditBankAccountPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditBankAccountPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditBankAccountPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditBankAccountPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditBankListPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditBankListPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditBankListPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditBankListPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'EditBankListPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconBank", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconBank' is used in nib 'EditBankListPage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _EditBlockedPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditBlockedPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditBlockedPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditBlockedPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfileAddressPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfileAddressPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileAddressPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileAddressPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfileBankView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfileBankView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditBankAccountPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditBankAccountPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfileBasicPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfileBasicPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileBasicPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileBasicPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfileBasicView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfileBasicView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileBasicPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileBasicPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfileEmailPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfileEmailPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileEmailPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileEmailPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfileEmailView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfileEmailView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileEmailPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileEmailPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfileNotificationPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfileNotificationPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfileNotificationPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfileNotificationPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfilePasswordPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfilePasswordPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfilePasswordPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfilePasswordPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfilePhonePage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfilePhonePage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfilePhonePage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfilePhonePage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfilePhonePassword: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfilePhonePassword"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfilePasswordPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfilePasswordPage
      }
      
      fileprivate init() {}
    }
    
    struct _EditProfilePhoneView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditProfilePhoneView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditProfilePhonePage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditProfilePhonePage
      }
      
      fileprivate init() {}
    }
    
    struct _EditSearchAddressPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditSearchAddressPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EditSearchAddressPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditSearchAddressPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'EditSearchAddressPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icLocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icLocation' is used in nib 'EditSearchAddressPage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _EmptyCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EmptyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EmptyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyCell
      }
      
      fileprivate init() {}
    }
    
    struct _EmptyLoadingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EmptyLoadingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ErrorView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ErrorView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _FavoriteListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FavoriteListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavoriteListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavoriteListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "chatGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatGrey' is used in nib 'FavoriteListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "favoriteSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'favoriteSelected' is used in nib 'FavoriteListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pinLocationGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pinLocationGray' is used in nib 'FavoriteListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FavoriteShareChatView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FavoriteShareChatView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "chatGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatGrey' is used in nib 'FavoriteShareChatView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icManage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icManage' is used in nib 'FavoriteShareChatView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icStarGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icStarGrey' is used in nib 'FavoriteShareChatView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in nib 'FavoriteShareChatView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FilterRatingView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FilterRatingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "starGreySmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starGreySmall' is used in nib 'FilterRatingView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FloatingPanelHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FloatingPanelHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'FloatingPanelHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "deleteColorSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deleteColorSmall' is used in nib 'FloatingPanelHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _FooterSectionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FooterSectionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ForgetPasswordView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ForgetPasswordView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ForgetPasswordView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ForgetPasswordView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "backBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backBlack' is used in nib 'ForgetPasswordView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _HeaderSectionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HeaderSectionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _HelpCenterPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HelpCenterPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HelpCenterPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HelpCenterPage
      }
      
      fileprivate init() {}
    }
    
    struct _HelpContactUs: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HelpContactUs"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HelpContactUs? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HelpContactUs
      }
      
      fileprivate init() {}
    }
    
    struct _HistoryOrderIdStatusCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HistoryOrderIdStatusCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryOrderIdStatusCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryOrderIdStatusCell
      }
      
      fileprivate init() {}
    }
    
    struct _HistoryOrderPackageCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HistoryOrderPackageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HistoryOrderPackageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HistoryOrderPackageCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeBlogCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeBlogCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeBlogCellIdentifier"
      let name = "HomeBlogCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeBlogCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeBlogCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeCategoryViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeCategoryViewCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeCategoryViewCellIdentifier"
      let name = "HomeCategoryViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCategoryViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCategoryViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeContentCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeContentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeContentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeContentCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "wave", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wave' is used in nib 'HomeContentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _IGSAlertView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "IGSAlertView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IGSAlertView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IGSAlertView
      }
      
      fileprivate init() {}
    }
    
    struct _IGSEmptyCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IGSEmptyCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IGSEmptyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IGSEmptyCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "emptyData", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emptyData' is used in nib 'IGSEmptyCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _IGSSelectCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = IGSSelectCell
      
      let bundle = R.hostingBundle
      let identifier = "IGSSelectCell"
      let name = "IGSSelectCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IGSSelectCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IGSSelectCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "checklistDone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checklistDone' is used in nib 'IGSSelectCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _InfoMasterCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InfoMasterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InfoMasterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InfoMasterCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "chatGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatGrey' is used in nib 'InfoMasterCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _InputFormCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InputFormCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> InputFormCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InputFormCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemAddMoreCategoryCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ItemAddMoreCategoryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemAddMoreCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemAddMoreCategoryCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemAddPhotoCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ItemAddPhotoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemAddPhotoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemAddPhotoCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bgBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bgBack' is used in nib 'ItemAddPhotoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTextFieldCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ItemTextFieldCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemTextFieldCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTextFieldCell
      }
      
      fileprivate init() {}
    }
    
    struct _LoadingCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingCell
      }
      
      fileprivate init() {}
    }
    
    struct _LoadingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LoadingView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LoadingView
      }
      
      fileprivate init() {}
    }
    
    struct _LocationPlaceCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LocationPlaceCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LocationPlaceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LocationPlaceCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "locationTimeGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'locationTimeGray' is used in nib 'LocationPlaceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MarkerInfoView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MarkerInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MarkerInfoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MarkerInfoView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "callColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'callColor' is used in nib 'MarkerInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chatTheme", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatTheme' is used in nib 'MarkerInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userPlacaholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userPlacaholder' is used in nib 'MarkerInfoView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailAboutDescriptionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MasterDetailAboutDescriptionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailAboutDescriptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailAboutDescriptionCell
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailImageHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MasterDetailImageHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "userPlacaholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userPlacaholder' is used in nib 'MasterDetailImageHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailPackageCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MasterDetailPackageCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailPackageCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailPackageCollectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailPackageTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MasterDetailPackageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailPackageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailPackageTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailPanelHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MasterDetailPanelHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pinLocationGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pinLocationGray' is used in nib 'MasterDetailPanelHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailParallaxHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MasterDetailParallaxHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailParallaxHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailParallaxHeader
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icNavChatInactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icNavChatInactive' is used in nib 'MasterDetailParallaxHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icStarGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icStarGrey' is used in nib 'MasterDetailParallaxHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icUpload", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icUpload' is used in nib 'MasterDetailParallaxHeader', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_onboarding_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_onboarding_1' is used in nib 'MasterDetailParallaxHeader', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailReviewCommentCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MasterDetailReviewCommentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailReviewCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailReviewCommentCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "userPlacaholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userPlacaholder' is used in nib 'MasterDetailReviewCommentCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailReviewHeaderCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MasterDetailReviewHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailReviewHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailReviewHeaderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "starGreySmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starGreySmall' is used in nib 'MasterDetailReviewHeaderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "starYellowSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starYellowSmall' is used in nib 'MasterDetailReviewHeaderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailReviewListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MasterDetailReviewListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailReviewListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailReviewListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "starGreySmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starGreySmall' is used in nib 'MasterDetailReviewListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "starYellowSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starYellowSmall' is used in nib 'MasterDetailReviewListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailSectionTitleTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MasterDetailSectionTitleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailSectionTitleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailSectionTitleTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MasterDetailServiceCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MasterDetailServiceCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterDetailServiceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterDetailServiceCell
      }
      
      fileprivate init() {}
    }
    
    struct _MasterOfTheWeekCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MasterOfTheWeekCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterOfTheWeekCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterOfTheWeekCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MasterOfTheWeekTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MasterOfTheWeekTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterOfTheWeekTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterOfTheWeekTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MasterPreviewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MasterPreviewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MasterPreviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MasterPreviewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MenuListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icContact", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icContact' is used in nib 'MenuListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MenuProfileCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MenuProfileCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuProfileCell
      }
      
      fileprivate init() {}
    }
    
    struct _MenuProfileTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuProfileTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icHideMenu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideMenu' is used in nib 'MenuProfileTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MenuSignInCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuSignInCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuSignInCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuSignInCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "menuSignIn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menuSignIn' is used in nib 'MenuSignInCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MenuSocialMediaCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuSocialMediaCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuSocialMediaCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuSocialMediaCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "connectFb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'connectFb' is used in nib 'MenuSocialMediaCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "connectIG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'connectIG' is used in nib 'MenuSocialMediaCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "connectTwitter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'connectTwitter' is used in nib 'MenuSocialMediaCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "connectYoutube", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'connectYoutube' is used in nib 'MenuSocialMediaCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MorePage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MorePage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MorePage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MorePage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icBlock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icBlock' is used in nib 'MorePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icReport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icReport' is used in nib 'MorePage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotAddPackageCollectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotAddPackageCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotAddPackageCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotAddPackageCollectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "addIconWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addIconWhite' is used in nib 'MySpotAddPackageCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotBankCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotBankCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotBankCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotBankCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bca", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bca' is used in nib 'MySpotBankCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "editIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editIcon' is used in nib 'MySpotBankCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotDetailAddPackageCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotDetailAddPackageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotDetailAddPackageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotDetailAddPackageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "addIconColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'addIconColor' is used in nib 'MySpotDetailAddPackageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotDetailPackageCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotDetailPackageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotDetailPackageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotDetailPackageCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotEditView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotEditView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotFinishConfirmationView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotFinishConfirmationView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "finishOrder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'finishOrder' is used in nib 'MySpotFinishConfirmationView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotFinishYourOrderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotFinishYourOrderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "photoIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'photoIcon' is used in nib 'MySpotFinishYourOrderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotIntro: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotIntro"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotIntro? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotIntro
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotMasterDetailAboutCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotMasterDetailAboutCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotMasterDetailAboutCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotMasterDetailAboutCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "editIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editIcon' is used in nib 'MySpotMasterDetailAboutCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotMasterDetailActionButtonCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotMasterDetailActionButtonCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotMasterDetailActionButtonCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotMasterDetailActionButtonCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotMasterDetailHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotMasterDetailHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotMasterDetailPackageCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = MySpotMasterDetailPackageCollectionCell
      
      let bundle = R.hostingBundle
      let identifier = "MySpotMasterDetailPackageCollectionCell"
      let name = "MySpotMasterDetailPackageCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotMasterDetailPackageCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotMasterDetailPackageCollectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "editSmallWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'editSmallWhite' is used in nib 'MySpotMasterDetailPackageCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotMasterInfoCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotMasterInfoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotMasterInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotMasterInfoCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotMasterInfoView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotMasterInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in nib 'MySpotMasterInfoView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotOrderCustomerCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotOrderCustomerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderCustomerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderCustomerCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotOrderDetailConfirmDeclineCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotOrderDetailConfirmDeclineCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderDetailConfirmDeclineCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderDetailConfirmDeclineCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotOrderDetailFinishOrderCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotOrderDetailFinishOrderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderDetailFinishOrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderDetailFinishOrderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "finishOrderSlide", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'finishOrderSlide' is used in nib 'MySpotOrderDetailFinishOrderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotOrderInformationCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotOrderInformationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderInformationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderInformationCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotOrderPackageCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotOrderPackageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderPackageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderPackageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in nib 'MySpotOrderPackageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eyeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eyeColor' is used in nib 'MySpotOrderPackageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotOrderTotalCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotOrderTotalCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotOrderTotalCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotOrderTotalCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotPackagePortofolioCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotPackagePortofolioCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotPackagePortofolioCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotPackagePortofolioCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotPackagePortofolioCollectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotPackagePortofolioCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotPackagePortofolioCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotPackagePortofolioCollectionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "deleteSmallWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deleteSmallWhite' is used in nib 'MySpotPackagePortofolioCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotPickerTableView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotPickerTableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotPickerTableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotPickerTableView
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotPickerTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotPickerTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotPickerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotPickerTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotPickerView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotPickerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotPickerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotPickerView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'MySpotPickerView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotRegisterTermsConditionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotRegisterTermsConditionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotRegistrationPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotRegistrationPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotRegistrationPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotRegistrationPage
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotRegistrationStep3: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotRegistrationStep3"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotRegistrationStep3? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotRegistrationStep3
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "iconAddPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAddPhoto' is used in nib 'MySpotRegistrationStep3', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotRegistrationTellUsMore: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MySpotRegistrationTellUsMore"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotRegistrationTellUsMore? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotRegistrationTellUsMore
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "iconInstagram", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconInstagram' is used in nib 'MySpotRegistrationTellUsMore', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconLinkedin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconLinkedin' is used in nib 'MySpotRegistrationTellUsMore', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconWebsite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconWebsite' is used in nib 'MySpotRegistrationTellUsMore', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconYoutube", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconYoutube' is used in nib 'MySpotRegistrationTellUsMore', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotRegistrationWhatToOfferCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotRegistrationWhatToOfferCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MySpotRegistrationWhatToOfferCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MySpotRegistrationWhatToOfferCell
      }
      
      fileprivate init() {}
    }
    
    struct _MySpotThanksPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MySpotThanksPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _OrderAgainCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderAgainCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderAgainCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderAgainCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderDetailCalendarView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderDetailCalendarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowGrey' is used in nib 'OrderDetailCalendarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in nib 'OrderDetailCalendarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "calendarColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendarColor' is used in nib 'OrderDetailCalendarView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'OrderDetailCalendarView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderDetailMasterCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderDetailMasterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderDetailMasterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDetailMasterCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderDetailNotesView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderDetailNotesView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'OrderDetailNotesView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notesColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notesColor' is used in nib 'OrderDetailNotesView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderDetailSelectLocationView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderDetailSelectLocationView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pinLocationColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pinLocationColor' is used in nib 'OrderDetailSelectLocationView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderDetailTimeView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderDetailTimeView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'OrderDetailTimeView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeColor' is used in nib 'OrderDetailTimeView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderHistoryListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderHistoryListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderHistoryListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderHistoryListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in nib 'OrderHistoryListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderIDHeaderCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderIDHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderIDHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderIDHeaderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowDownWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowDownWhite' is used in nib 'OrderIDHeaderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderInformationCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderInformationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderInformationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderInformationCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderNotesCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderNotesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderNotesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderNotesCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in nib 'OrderNotesCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "notesColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'notesColor' is used in nib 'OrderNotesCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderSectionHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderSectionHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderSectionHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSectionHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderSelectDateAndTimeCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderSelectDateAndTimeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderSelectDateAndTimeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSelectDateAndTimeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "calendarColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendarColor' is used in nib 'OrderSelectDateAndTimeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "timeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'timeColor' is used in nib 'OrderSelectDateAndTimeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderSelectLocationCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderSelectLocationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderSelectLocationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSelectLocationCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "locationColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'locationColor' is used in nib 'OrderSelectLocationCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderStatusCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderStatusCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderStatusCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderStatusCell
      }
      
      fileprivate init() {}
    }
    
    struct _PackageDetailDescriptionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PackageDetailDescriptionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageDetailDescriptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageDetailDescriptionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "clockDuration", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clockDuration' is used in nib 'PackageDetailDescriptionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PackageDetailInfoCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PackageDetailInfoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageDetailInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageDetailInfoCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "starGreySmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starGreySmall' is used in nib 'PackageDetailInfoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "starYellowSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'starYellowSmall' is used in nib 'PackageDetailInfoCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PackageDetailOrderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PackageDetailOrderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageDetailOrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageDetailOrderCell
      }
      
      fileprivate init() {}
    }
    
    struct _PackageDetailPanelCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PackageDetailPanelCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageDetailPanelCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageDetailPanelCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pinLocationGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pinLocationGray' is used in nib 'PackageDetailPanelCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PackageDetailPortofolioCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PackageDetailPortofolioCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageDetailPortofolioCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageDetailPortofolioCell
      }
      
      fileprivate init() {}
    }
    
    struct _PackageDetailView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PackageDetailView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icHeart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHeart' is used in nib 'PackageDetailView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icLocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icLocation' is used in nib 'PackageDetailView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icNavChatInactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icNavChatInactive' is used in nib 'PackageDetailView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icStarGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icStarGrey' is used in nib 'PackageDetailView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icUpload", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icUpload' is used in nib 'PackageDetailView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PackageOrderCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PackageOrderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackageOrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackageOrderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "deleteColorSmall", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deleteColorSmall' is used in nib 'PackageOrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "selectedOrder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selectedOrder' is used in nib 'PackageOrderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PackagePortofolioCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PackagePortofolioCollectionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PackagePortofolioCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PackagePortofolioCollectionCell
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentBankCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaymentBankCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentBankCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentBankCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowBottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowBottom' is used in nib 'PaymentBankCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paymentBank", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paymentBank' is used in nib 'PaymentBankCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentPayCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PaymentPayCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentPayCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentPayCell
      }
      
      fileprivate init() {}
    }
    
    struct _PaymentVoucherCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PaymentVoucherCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PaymentVoucherCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PaymentVoucherCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Image' is used in nib 'PaymentVoucherCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PleaseWaitPopUpView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PleaseWaitPopUpView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PleaseWaitPopUpView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PleaseWaitPopUpView
      }
      
      fileprivate init() {}
    }
    
    struct _PopularResultCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PopularResultCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopularResultCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopularResultCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowBottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowBottom' is used in nib 'PopularResultCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _PopularSearchCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PopularSearchCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PopularSearchCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PopularSearchCell
      }
      
      fileprivate init() {}
    }
    
    struct _PortalMySpotView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PortalMySpotView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PrivacyPolicyView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PrivacyPolicyView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PrivacyPolicyView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PrivacyPolicyView
      }
      
      fileprivate init() {}
    }
    
    struct _ProcessPaymentCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProcessPaymentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProcessPaymentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProcessPaymentCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileEditButtonCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileEditButtonCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileEditButtonCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileEditButtonCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileHeaderTVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileHeaderTVCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileHeaderTVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileHeaderTVCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bgBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bgBack' is used in nib 'ProfileHeaderTVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icEditBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icEditBackground' is used in nib 'ProfileHeaderTVCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconAddPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconAddPhoto' is used in nib 'ProfileHeaderTVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileMapsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileMapsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileMapsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileMapsCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileMenuTVCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileMenuTVCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileMenuTVCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileMenuTVCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in nib 'ProfileMenuTVCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileNameLabel: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileNameLabel"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileNameLabel? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileNameLabel
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileNotificationCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileNotificationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileNotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileNotificationCell
      }
      
      fileprivate init() {}
    }
    
    struct _QuestionHelpCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuestionHelpCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionHelpCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionHelpCell
      }
      
      fileprivate init() {}
    }
    
    struct _QuestionListTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QuestionListTableCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionListTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionListTableCell
      }
      
      fileprivate init() {}
    }
    
    struct _RadioButtonAndTitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RadioButtonAndTitleCell
      
      let bundle = R.hostingBundle
      let identifier = "RadioButtonAndTitleCell"
      let name = "RadioButtonAndTitleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RadioButtonAndTitleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RadioButtonAndTitleCell
      }
      
      fileprivate init() {}
    }
    
    struct _RadioButtonDoubleLabelCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RadioButtonDoubleLabelCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RadioButtonDoubleLabelCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RadioButtonDoubleLabelCell
      }
      
      fileprivate init() {}
    }
    
    struct _ReasonReportView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReasonReportView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReasonReportView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReasonReportView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'ReasonReportView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _RecentChatCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RecentChatCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RecentChatCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentChatCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in nib 'RecentChatCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userPlacaholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userPlacaholder' is used in nib 'RecentChatCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ReportProfileFormPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReportProfileFormPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReportProfileFormPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportProfileFormPage
      }
      
      fileprivate init() {}
    }
    
    struct _ReportProfileHeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReportProfileHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReportProfileHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportProfileHeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _ReportProfileItemCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReportProfileItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReportProfileItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReportProfileItemCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in nib 'ReportProfileItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ReportThisOrderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReportThisOrderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowBottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowBottom' is used in nib 'ReportThisOrderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _RequestWithdrawalCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RequestWithdrawalCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RequestWithdrawalCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RequestWithdrawalCell
      }
      
      fileprivate init() {}
    }
    
    struct _ResetPasswordPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ResetPasswordPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ResetPasswordPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ResetPasswordPage
      }
      
      fileprivate init() {}
    }
    
    struct _ReviewAndConfirmCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReviewAndConfirmCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ReviewAndConfirmCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReviewAndConfirmCell
      }
      
      fileprivate init() {}
    }
    
    struct _ReviewAndConfirmView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ReviewAndConfirmView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icStarGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icStarGrey' is used in nib 'ReviewAndConfirmView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icStarYellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icStarYellow' is used in nib 'ReviewAndConfirmView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userPlacaholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'userPlacaholder' is used in nib 'ReviewAndConfirmView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ReviewAndReportThankYouView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ReviewAndReportThankYouView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchLocationPanelView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchLocationPanelView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "pinLocationColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pinLocationColor' is used in nib 'SearchLocationPanelView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowBottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowBottom' is used in nib 'SearchView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SelectLocationPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SelectLocationPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectLocationPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectLocationPage
      }
      
      fileprivate init() {}
    }
    
    struct _SelectViaMapCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectViaMapCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectViaMapCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectViaMapCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "mapIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mapIcon' is used in nib 'SelectViaMapCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SelectViaMapView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectViaMapView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'SelectViaMapView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pinLocationColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pinLocationColor' is used in nib 'SelectViaMapView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SelectedImageCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectedImageCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SelectedImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectedImageCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "deleteSmallWhite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'deleteSmallWhite' is used in nib 'SelectedImageCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ServicesCategoryCellView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ServicesCategoryCellView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServicesCategoryCellView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServicesCategoryCellView
      }
      
      fileprivate init() {}
    }
    
    struct _ServicesCellView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ServicesCellView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServicesCellView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServicesCellView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bgBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bgBack' is used in nib 'ServicesCellView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ServicesHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ServicesHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServicesHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServicesHeaderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bgBack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bgBack' is used in nib 'ServicesHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _ServicesStackView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ServicesStackView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServicesStackView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServicesStackView
      }
      
      fileprivate init() {}
    }
    
    struct _SettingPage: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingPage
      }
      
      fileprivate init() {}
    }
    
    struct _ShowImageView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ShowImageView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShowImageView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShowImageView
      }
      
      fileprivate init() {}
    }
    
    struct _SideMenuPageView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SideMenuPageView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "bgMenuLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bgMenuLogo' is used in nib 'SideMenuPageView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icHideMenu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideMenu' is used in nib 'SideMenuPageView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SignInPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignInPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignInPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignInPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "closeBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'closeBlack' is used in nib 'SignInPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icFacebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icFacebook' is used in nib 'SignInPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icGoogle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icGoogle' is used in nib 'SignInPage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SignUpConfirmPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignUpConfirmPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignUpConfirmPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignUpConfirmPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icHideBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icHideBlack' is used in nib 'SignUpConfirmPage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SignUpPage: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignUpPage"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SignUpPage? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SignUpPage
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "backBlack", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backBlack' is used in nib 'SignUpPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icFacebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icFacebook' is used in nib 'SignUpPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icGoogle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icGoogle' is used in nib 'SignUpPage', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SkeletonLoadingCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SkeletonLoadingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SkeletonLoadingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SkeletonLoadingCell
      }
      
      fileprivate init() {}
    }
    
    struct _SocMedCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SocMedCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SocMedCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SocMedCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "iconInstagram", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconInstagram' is used in nib 'SocMedCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SpecialDealsCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SpecialDealsCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpecialDealsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpecialDealsCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SpecialDealstableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SpecialDealstableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SpecialDealstableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SpecialDealstableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SubTotalOrderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SubTotalOrderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubTotalOrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubTotalOrderCell
      }
      
      fileprivate init() {}
    }
    
    struct _TotalOrderProcessCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TotalOrderProcessCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TotalOrderProcessCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TotalOrderProcessCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionActivePackageCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TransactionActivePackageCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionActivePackageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionActivePackageCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "arrowRight", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrowRight' is used in nib 'TransactionActivePackageCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "eyeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'eyeColor' is used in nib 'TransactionActivePackageCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionDetailCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionDetailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionDetailHelpContactStatusCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionDetailHelpContactStatusCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailHelpContactStatusCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailHelpContactStatusCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionDetailOrderCompleteCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionDetailOrderCompleteCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDetailOrderCompleteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDetailOrderCompleteCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionDotListCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionDotListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionDotListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionDotListCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionEmailCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionEmailCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionEmailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionEmailCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionPaymentConfirmCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionPaymentConfirmCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionPaymentConfirmCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionPaymentConfirmCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionStatusCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionStatusCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionStatusCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionStatusCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionThankYouCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionThankYouCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionThankYouCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionThankYouCell
      }
      
      fileprivate init() {}
    }
    
    struct _TransactionTotalCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransactionTotalCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTotalCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTotalCell
      }
      
      fileprivate init() {}
    }
    
    struct _WalkthroughView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WalkthroughView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _WalkthroughViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WalkthroughViewCell
      
      let bundle = R.hostingBundle
      let identifier = "WalkthroughViewCellIdentifier"
      let name = "WalkthroughViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalkthroughViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalkthroughViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _WishlistCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WishlistCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WishlistCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WishlistCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "iconLove", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconLove' is used in nib 'WishlistCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "iconMeeting", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'iconMeeting' is used in nib 'WishlistCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct _WithdrawalDescriptionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WithdrawalDescriptionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WithdrawalDescriptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WithdrawalDescriptionCell
      }
      
      fileprivate init() {}
    }
    
    struct _WithdrawalHistoryCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WithdrawalHistoryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WithdrawalHistoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WithdrawalHistoryCell
      }
      
      fileprivate init() {}
    }
    
    struct _YourTransactionDetail: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "YourTransactionDetail"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YourTransactionDetail? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YourTransactionDetail
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "bgSplashBackground", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bgSplashBackground' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageTitleIgetspot", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageTitleIgetspot' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
